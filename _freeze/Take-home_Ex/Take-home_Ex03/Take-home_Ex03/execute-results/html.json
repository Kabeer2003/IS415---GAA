{
  "hash": "fdf6e419cad393a5d5ade02864f5e0ac",
  "result": {
    "markdown": "---\ntitle: \"Take_home_Ex03 test\"\n\nauthor: Kabeer\ndate: \"March 23, 2024\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\n---\n\n\n## Installing relevant R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly, stringr, spatstat, maptools, raster)\n```\n:::\n\n\n## Importing and Pre-processing Data\n\n#### Importing Geospatial Data \n\nImporting the shapefile MP14_SUBZONE_WEB_PL.shp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_mpsz = st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\MP14_SUBZONE_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nTransforming the Coordinate Reference System (CRS) from SVY21 to WGS84 to ensure that our aspatial and geospatial data are compatible with each other\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs_info1 <- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"SVY21\"\n```\n:::\n\n```{.r .cell-code}\nsingapore_mpsz <- st_transform(singapore_mpsz, crs = 4326)\n\nsingapore_mpsz <- st_make_valid(singapore_mpsz)\n\ncrs_info1 <- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"EPSG:4326\"\n```\n:::\n:::\n\n\n#### Importing Aspatial Data \n\nImporting the csv file 'updated_hawker_centres.csv' using the read_csv() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_centres = read_csv(\"data/aspatial/updated_hawker_centres.csv\")\n```\n:::\n\n\nImporting the csv file 'updated_hawker_stalls.csv' using the read_csv() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_stalls = read_csv(\"data/aspatial/updated_hawker_stalls.csv\")\n```\n:::\n\n\nFiltering out all values where the postal code is null in order to accurately map hawker centre stalls to the right hawker centres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(is.numeric(hawker_centres$`Postal Code`)) {\n  hawker_centres$`Postal Code` <- as.character(hawker_centres$`Postal Code`)\n}\n\n# Convert the 'Postal Code' column in hawker_stalls to character if it's numeric\nif(is.numeric(hawker_stalls$`Postal Code`)) {\n  hawker_stalls$`Postal Code` <- as.character(hawker_stalls$`Postal Code`)\n}\n```\n:::\n\n\nLeft joining all hawker food stalls to hawker centres using their postal code.\n\n**NOTE**: Every hawker centre could be uniquely identified using a postal code and one hawker centre has multiple stalls in it\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_data <- left_join(hawker_centres, hawker_stalls, by = \"Postal Code\")\n```\n:::\n\n\nFiltering out relevant fields for analysis from the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_stalls_data_filtered <- combined_data %>%\n  dplyr::select(`Postal Code`, `Hawker Centres`, Longitude, Latitude, `Hawker Centre Stalls`)\n```\n:::\n\n\nEliminating all hawkers which do not have a longitude and latitude (Attempting to remove all null values that could potentially hinder analysis)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_hawker_stalls_data_clean <- hawker_stalls_data_filtered[!is.na(hawker_stalls_data_filtered$Longitude) & !is.na(hawker_stalls_data_filtered$Latitude), ]\n```\n:::\n\n\nConverting the joint data to a sf dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_hawker_stalls_data_sf <- st_as_sf(filtered_hawker_stalls_data_clean, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n```\n:::\n\n\nEnsuring that the data is the correct coordinate reference system i.e. WGS84\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs_info2 <- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"EPSG:4326\"\n```\n:::\n\n```{.r .cell-code}\nfiltered_hawker_stalls_data_sf <- st_transform(filtered_hawker_stalls_data_sf, crs = 4326)\n\ncrs_info2 <- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"EPSG:4326\"\n```\n:::\n:::\n\n\nSince the two csv files for the aspatial data were derived from PDFs, further cleansing would be cleansed on the joint dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_hawker_stalls_data_sf <- filtered_hawker_stalls_data_sf %>%\n  filter(!is.na(`Hawker Centre Stalls`))\n```\n:::\n\n\nRemoving all fields where the attribute hawker centres contains the phrase 'Back to'\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_hawker_stalls_data_sf <- filtered_hawker_stalls_data_sf %>%\n  filter(!grepl(\"Back to\", `Hawker Centre Stalls`))\n```\n:::\n\n\nWe need to ensure that each hawker stall has a unit no. within the hawker centre. Consequently, we would be checking if the if the hawker centre stalls field contains the character '\\#' indicating that a unit number is present\n\n**Real World Context:** Every stall in the hawker centre has a unit number indicating the location of the hawker within the food centre. It is usually in the format #01-XXX\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_filtered_hawker_stalls_data_sf <- filtered_hawker_stalls_data_sf %>%\n  filter(grepl(\"#\", `Hawker Centre Stalls`))\n```\n:::\n\n\nOnce again confirming that the coordinate reference system is WGS84 so that we could combine our aspatial data with our geospatial data i.e. the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs_info3 <- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"EPSG:4326\"\n```\n:::\n\n```{.r .cell-code}\ncomplete_filtered_hawker_stalls_data_sf <- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\n\ncrs_info3 <- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"EPSG:4326\"\n```\n:::\n:::\n\n\nEnsuring that our data is valid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_mpsz <- st_transform(singapore_mpsz, 4326)\nsingapore_mpsz <- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf <- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\ncomplete_filtered_hawker_stalls_data_sf <- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n```\n:::\n\n\n#### Joining our Geospatial and Aspatial data together\n\nNow, we would be using st_join to combine our geospatial data with our aspatial data, it is imperative that every hawker centre belongs to a region and planning area and joining the data would ensure that the each hawker centre is mapped to the right region and planning area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers_united = st_join(singapore_mpsz, complete_filtered_hawker_stalls_data_sf)\n```\n:::\n\n\nFiltering out fields relevant for analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers_by_region <- hawkers_united %>%\n  dplyr::select(`PLN_AREA_N`, `REGION_N`, `Postal Code`, `Hawker Centres`, `Hawker Centre Stalls`, geometry)\n```\n:::\n\n\nNow removing all redundant areas which do not have hawker centres, by filtering this dataframes where the postal code is null, we would automatically remove areas which do not have hawker centres such as Marina South. Furthermore, we could be assured that every hawker centre belongs to a planning area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers_all_regions <- hawkers_by_region %>%\n  filter(!is.na(`Postal Code`))\n```\n:::\n\n\n#### Visualisation of all hawker centres on the Singapore Map\n\nPlotting all hawker centres on a map to check if data transformation was correct\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(singapore_mpsz) +\n  tm_polygons() + \ntm_shape(hawkers_all_regions) +\n  tm_dots(col = \"red\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### Storing object in a RDS file for future reference\n\nSaving this data to an rds file for future perusal\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndirectory_path <- \"data\"\n\nif (!dir.exists(directory_path)) {\n  dir.create(directory_path, recursive = TRUE)\n}\n\nwrite_rds(hawkers_all_regions, file.path(directory_path, \"hawkers_all_regions.rds\"))\n```\n:::\n\n\nTesting if we are able to read the rds successfully\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- read_rds(\"data/hawkers_all_regions.rds\")\n```\n:::\n\n\nSince ppp and owin objects cannot be created in degrees i.e. WGS84, we would have to use a two-dimensional CRS that uses relative distances. Hence we would be converting the coordinate reference system of both our dataframe with all points and the map of Singapore to SVY21.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_mpsz <- st_transform(singapore_mpsz, 3414)\nsingapore_mpsz <- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf <- st_transform(complete_filtered_hawker_stalls_data_sf, 3414)\ncomplete_filtered_hawker_stalls_data_sf <- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n```\n:::\n\n\nConverting both SF dataframes (Geospatial and Aspatial) to SP (Spatial format)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_centre_pts <- as_Spatial(complete_filtered_hawker_stalls_data_sf) \nsingapore_mpsz1 <- as_Spatial(singapore_mpsz)\n```\n:::\n\n\n#### Converting hawker centre points and the Singapore map to SP\n\nThe map data would be converted to spatial polygons which represent the different sub-regions in Singapore whereas the hawker centre points would be converted to Spatial Points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_centre_pts_sp <- as(hawker_centre_pts, \"SpatialPoints\") \nsingapore_mpsz_sp <- as(singapore_mpsz1, \"SpatialPolygons\")\n```\n:::\n\n\n#### Creating owin object (Singapore Map)\n\nConverting the Singapore map sp object to an owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingapore_owin <- as(singapore_mpsz_sp, \"owin\")\nplot(singapore_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(singapore_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWindow: polygonal boundary\n386 separate polygons (20 holes)\n                   vertices         area relative.area\npolygon 1               156  1.63038e+06      2.09e-03\npolygon 2               303  5.59816e+05      7.16e-04\npolygon 3                47  1.60809e+05      2.06e-04\npolygon 4                47  5.95423e+05      7.61e-04\npolygon 5                48  3.87430e+05      4.95e-04\npolygon 6                59  1.03038e+06      1.32e-03\npolygon 7                83  5.51731e+05      7.06e-04\npolygon 8                70  2.90185e+05      3.71e-04\npolygon 9               217  1.08479e+06      1.39e-03\npolygon 10               42  6.31643e+05      8.08e-04\npolygon 11              226  1.82685e+06      2.34e-03\npolygon 12               52  2.93711e+05      3.76e-04\npolygon 13              256  1.84406e+06      2.36e-03\npolygon 14              164  3.92563e+05      5.02e-04\npolygon 15              238  5.06591e+05      6.48e-04\npolygon 16               22  6.74620e+03      8.63e-06\npolygon 17               47  3.82089e+04      4.89e-05\npolygon 18               65  8.42861e+04      1.08e-04\npolygon 19              469  2.06120e+06      2.64e-03\npolygon 20              264  1.50631e+06      1.93e-03\npolygon 21             1149  3.30122e+07      4.22e-02\npolygon 22 (hole)        23 -1.25692e+03     -1.61e-06\npolygon 23                4  9.47128e+01      1.21e-07\npolygon 24               37  1.29491e+04      1.66e-05\npolygon 25               30  4.28953e+03      5.49e-06\npolygon 26              145  9.61783e+05      1.23e-03\npolygon 27              227  1.10308e+06      1.41e-03\npolygon 28               19  3.09219e+04      3.95e-05\npolygon 29               10  6.60201e+03      8.44e-06\npolygon 30              234  2.08755e+06      2.67e-03\npolygon 31               15  4.03288e+04      5.16e-05\npolygon 32             1045  4.44510e+06      5.68e-03\npolygon 33 (hole)        13 -3.92141e+02     -5.01e-07\npolygon 34              233  4.72887e+05      6.05e-04\npolygon 35               14  5.86528e+03      7.50e-06\npolygon 36               10  4.90997e+02      6.28e-07\npolygon 37               94  5.96175e+04      7.62e-05\npolygon 38               59  3.43163e+04      4.39e-05\npolygon 39 (hole)         3 -7.68533e-02     -9.83e-11\npolygon 40                4  2.69408e+02      3.45e-07\npolygon 41             1026  1.27782e+06      1.63e-03\npolygon 42              132  9.53360e+04      1.22e-04\npolygon 43                6  4.50376e+02      5.76e-07\npolygon 44              155  2.67503e+05      3.42e-04\npolygon 45              211  4.70522e+05      6.02e-04\npolygon 46              106  3.04131e+03      3.89e-06\npolygon 47               83  5.28926e+03      6.76e-06\npolygon 48             1462  4.87083e+06      6.23e-03\npolygon 49 (hole)        11 -8.36614e+01     -1.07e-07\npolygon 50               75  1.73525e+04      2.22e-05\npolygon 51              147  3.10396e+03      3.97e-06\npolygon 52              138  3.22285e+03      4.12e-06\npolygon 53               45  2.51228e+03      3.21e-06\npolygon 54               40  1.38603e+04      1.77e-05\npolygon 55              426  3.44964e+06      4.41e-03\npolygon 56               83  1.03237e+05      1.32e-04\npolygon 57              104  1.12730e+06      1.44e-03\npolygon 58              759  2.70301e+06      3.46e-03\npolygon 59 (hole)        28 -1.99840e+01     -2.56e-08\npolygon 60 (hole)        48 -1.38327e+02     -1.77e-07\npolygon 61 (hole)        20 -4.37607e+00     -5.60e-09\npolygon 62 (hole)       351 -1.21346e+03     -1.55e-06\npolygon 63               53  2.76828e+05      3.54e-04\npolygon 64              114  6.36655e+04      8.14e-05\npolygon 65               83  1.96620e+05      2.51e-04\npolygon 66               33  3.65334e+05      4.67e-04\npolygon 67              106  1.45483e+06      1.86e-03\npolygon 68              133  8.53203e+05      1.09e-03\npolygon 69              196  1.07072e+06      1.37e-03\npolygon 70               47  5.33016e+05      6.82e-04\npolygon 71               82  4.42501e+05      5.66e-04\npolygon 72              221  9.31409e+04      1.19e-04\npolygon 73               37  4.11723e+05      5.27e-04\npolygon 74              227  5.87221e+05      7.51e-04\npolygon 75               35  3.94370e+04      5.04e-05\npolygon 76               96  1.88768e+05      2.41e-04\npolygon 77               59  1.33007e+05      1.70e-04\npolygon 78               46  4.48128e+05      5.73e-04\npolygon 79               31  5.21199e+05      6.67e-04\npolygon 80               17  3.50788e+05      4.49e-04\npolygon 81               54  2.61841e+05      3.35e-04\npolygon 82              239  1.59034e+06      2.03e-03\npolygon 83              298  8.86957e+05      1.13e-03\npolygon 84              190  2.23207e+05      2.85e-04\npolygon 85              142  2.00053e+05      2.56e-04\npolygon 86              169  7.10568e+05      9.09e-04\npolygon 87               34  7.48683e+05      9.57e-04\npolygon 88              192  5.91779e+05      7.57e-04\npolygon 89              177  1.75595e+06      2.25e-03\npolygon 90              192  3.40742e+05      4.36e-04\npolygon 91              217  3.29438e+05      4.21e-04\npolygon 92               87  1.70664e+05      2.18e-04\npolygon 93              173  3.68483e+05      4.71e-04\npolygon 94              289  7.60191e+06      9.72e-03\npolygon 95              242  2.21974e+05      2.84e-04\npolygon 96              130  2.80176e+05      3.58e-04\npolygon 97              140  2.14251e+05      2.74e-04\npolygon 98               83  1.73123e+05      2.21e-04\npolygon 99               92  5.33671e+05      6.82e-04\npolygon 100              95  1.45518e+05      1.86e-04\npolygon 101              55  6.35706e+05      8.13e-04\npolygon 102              54  5.03226e+05      6.44e-04\npolygon 103              48  5.56817e+04      7.12e-05\npolygon 104              60  1.16331e+05      1.49e-04\npolygon 105             137  2.05165e+06      2.62e-03\npolygon 106             122  2.43459e+06      3.11e-03\npolygon 107             113  1.71362e+06      2.19e-03\npolygon 108              55  3.10515e+05      3.97e-04\npolygon 109              95  1.38665e+06      1.77e-03\npolygon 110             127  1.95186e+06      2.50e-03\npolygon 111             266  4.52473e+05      5.79e-04\npolygon 112              79  6.97507e+05      8.92e-04\npolygon 113              71  5.63055e+03      7.20e-06\npolygon 114              10  1.99759e+02      2.55e-07\npolygon 115             435  2.77052e+07      3.54e-02\npolygon 116               3  1.96470e-01      2.51e-10\npolygon 117             117  1.71719e+05      2.20e-04\npolygon 118             271  1.09784e+06      1.40e-03\npolygon 119             135  1.05350e+06      1.35e-03\npolygon 120             305  2.79600e+06      3.58e-03\npolygon 121             554  3.04972e+06      3.90e-03\npolygon 122 (hole)        3 -7.06427e-01     -9.03e-10\npolygon 123             137  3.36218e+05      4.30e-04\npolygon 124              62  7.41438e+05      9.48e-04\npolygon 125             319  4.60551e+05      5.89e-04\npolygon 126             198  5.43484e+05      6.95e-04\npolygon 127              52  2.78303e+05      3.56e-04\npolygon 128             539  1.76950e+06      2.26e-03\npolygon 129             149  3.85093e+05      4.92e-04\npolygon 130             120  5.58761e+05      7.15e-04\npolygon 131              88  5.67581e+06      7.26e-03\npolygon 132             212  2.09608e+06      2.68e-03\npolygon 133              88  7.22591e+05      9.24e-04\npolygon 134             277  2.55046e+06      3.26e-03\npolygon 135              34  2.04263e+06      2.61e-03\npolygon 136              70  3.26041e+06      4.17e-03\npolygon 137             214  1.34615e+06      1.72e-03\npolygon 138              25  1.71337e+05      2.19e-04\npolygon 139              84  4.96255e+04      6.35e-05\npolygon 140             198  1.93991e+05      2.48e-04\npolygon 141              77  1.20171e+05      1.54e-04\npolygon 142             272  8.50853e+05      1.09e-03\npolygon 143              99  1.02647e+06      1.31e-03\npolygon 144             154  1.67538e+05      2.14e-04\npolygon 145              81  1.16002e+06      1.48e-03\npolygon 146              32  2.56100e+06      3.28e-03\npolygon 147             112  7.35502e+05      9.41e-04\npolygon 148             124  9.48159e+05      1.21e-03\npolygon 149             134  1.32109e+06      1.69e-03\npolygon 150              59  2.99730e+06      3.83e-03\npolygon 151             122  1.37683e+06      1.76e-03\npolygon 152             129  1.92662e+06      2.46e-03\npolygon 153             513  3.20330e+06      4.10e-03\npolygon 154 (hole)        3 -2.51044e-02     -3.21e-11\npolygon 155              92  2.34937e+06      3.00e-03\npolygon 156              85  9.63202e+05      1.23e-03\npolygon 157              35  4.85023e+05      6.20e-04\npolygon 158              82  1.88130e+06      2.41e-03\npolygon 159             103  1.42508e+06      1.82e-03\npolygon 160              60  2.38727e+06      3.05e-03\npolygon 161             114  1.07899e+06      1.38e-03\npolygon 162              71  4.59544e+05      5.88e-04\npolygon 163              90  2.47889e+05      3.17e-04\npolygon 164             106  2.13582e+05      2.73e-04\npolygon 165             205  2.47265e+06      3.16e-03\npolygon 166 (hole)        3 -4.87319e-02     -6.23e-11\npolygon 167 (hole)        3 -3.81487e-03     -4.88e-12\npolygon 168 (hole)       36 -7.79901e+03     -9.97e-06\npolygon 169               4  1.46442e-02      1.87e-11\npolygon 170             573  1.94069e+06      2.48e-03\npolygon 171 (hole)        4 -2.14740e-02     -2.75e-11\npolygon 172             348  2.11850e+06      2.71e-03\npolygon 173             109  4.85049e+05      6.20e-04\npolygon 174             102  7.57905e+05      9.69e-04\npolygon 175             119  3.51243e+05      4.49e-04\npolygon 176              69  1.31292e+06      1.68e-03\npolygon 177 (hole)        3 -3.72872e-02     -4.77e-11\npolygon 178              63  9.46648e+05      1.21e-03\npolygon 179             100  7.48039e+05      9.57e-04\npolygon 180             110  1.02229e+06      1.31e-03\npolygon 181              95  4.10995e+05      5.26e-04\npolygon 182              73  8.39489e+05      1.07e-03\npolygon 183             173  1.22849e+06      1.57e-03\npolygon 184              43  5.54625e+05      7.09e-04\npolygon 185             130  3.39290e+06      4.34e-03\npolygon 186              97  1.87809e+06      2.40e-03\npolygon 187              40  8.67749e+05      1.11e-03\npolygon 188              55  6.39144e+05      8.17e-04\npolygon 189              39  3.26015e+06      4.17e-03\npolygon 190              54  4.11402e+05      5.26e-04\npolygon 191              75  4.18656e+05      5.35e-04\npolygon 192             104  2.09818e+06      2.68e-03\npolygon 193              91  1.52455e+06      1.95e-03\npolygon 194              79  8.13382e+05      1.04e-03\npolygon 195              94  1.48429e+06      1.90e-03\npolygon 196             118  3.10803e+06      3.97e-03\npolygon 197              97  1.03728e+06      1.33e-03\npolygon 198             157  2.82017e+06      3.61e-03\npolygon 199              53  9.24760e+05      1.18e-03\npolygon 200             118  1.80655e+06      2.31e-03\npolygon 201              64  1.40454e+06      1.80e-03\npolygon 202              91  2.37934e+06      3.04e-03\npolygon 203             111  2.07780e+06      2.66e-03\npolygon 204             134  3.14295e+06      4.02e-03\npolygon 205             195  2.63648e+06      3.37e-03\npolygon 206              80  1.05717e+06      1.35e-03\npolygon 207              56  1.28795e+06      1.65e-03\npolygon 208              69  4.39648e+05      5.62e-04\npolygon 209              50  7.46884e+05      9.55e-04\npolygon 210              61  4.46241e+05      5.71e-04\npolygon 211              72  5.72500e+05      7.32e-04\npolygon 212             152  2.95937e+06      3.78e-03\npolygon 213             119  2.15829e+06      2.76e-03\npolygon 214             140  1.34746e+06      1.72e-03\npolygon 215              60  2.33891e+06      2.99e-03\npolygon 216             111  4.29714e+06      5.50e-03\npolygon 217             105  9.91041e+05      1.27e-03\npolygon 218             202  2.04955e+06      2.62e-03\npolygon 219             126  2.57909e+06      3.30e-03\npolygon 220              91  3.18758e+06      4.08e-03\npolygon 221              40  9.06316e+05      1.16e-03\npolygon 222              41  3.80204e+05      4.86e-04\npolygon 223              92  5.26383e+05      6.73e-04\npolygon 224              77  8.00299e+05      1.02e-03\npolygon 225             124  8.98563e+05      1.15e-03\npolygon 226             172  1.79346e+06      2.29e-03\npolygon 227             371  3.18810e+06      4.08e-03\npolygon 228              85  4.94502e+05      6.32e-04\npolygon 229              79  1.06189e+06      1.36e-03\npolygon 230              74  1.79446e+06      2.29e-03\npolygon 231              96  3.47521e+06      4.44e-03\npolygon 232              74  1.22567e+06      1.57e-03\npolygon 233             139  1.97438e+06      2.52e-03\npolygon 234             159  1.08508e+06      1.39e-03\npolygon 235              90  1.96414e+06      2.51e-03\npolygon 236              43  1.97494e+06      2.53e-03\npolygon 237             141  4.14132e+06      5.30e-03\npolygon 238             164  4.33983e+06      5.55e-03\npolygon 239             131  1.79606e+06      2.30e-03\npolygon 240             130  2.25115e+06      2.88e-03\npolygon 241             124  7.76141e+05      9.93e-04\npolygon 242             105  2.20631e+06      2.82e-03\npolygon 243             106  1.18013e+06      1.51e-03\npolygon 244              73  1.22990e+06      1.57e-03\npolygon 245             101  9.64681e+05      1.23e-03\npolygon 246              75  1.26341e+06      1.62e-03\npolygon 247              50  3.69771e+05      4.73e-04\npolygon 248              83  3.20366e+06      4.10e-03\npolygon 249              96  1.10727e+06      1.42e-03\npolygon 250              81  1.28739e+06      1.65e-03\npolygon 251              32  8.42672e+05      1.08e-03\npolygon 252              61  1.33353e+06      1.71e-03\npolygon 253              50  1.00740e+06      1.29e-03\npolygon 254             147  8.94517e+05      1.14e-03\npolygon 255              76  9.11208e+05      1.17e-03\npolygon 256              43  1.14382e+06      1.46e-03\npolygon 257              95  1.32887e+06      1.70e-03\npolygon 258             111  6.09896e+05      7.80e-04\npolygon 259              66  7.63181e+05      9.76e-04\npolygon 260             164  2.76835e+06      3.54e-03\npolygon 261             134  3.46704e+06      4.43e-03\npolygon 262             401  7.83399e+06      1.00e-02\npolygon 263              80  2.77864e+06      3.55e-03\npolygon 264              54  8.62737e+05      1.10e-03\npolygon 265             105  1.58344e+06      2.03e-03\npolygon 266              43  8.46135e+05      1.08e-03\npolygon 267             122  1.74439e+06      2.23e-03\npolygon 268              89  1.00159e+06      1.28e-03\npolygon 269              82  1.09730e+06      1.40e-03\npolygon 270             251  4.84852e+06      6.20e-03\npolygon 271              53  6.68456e+05      8.55e-04\npolygon 272              69  6.24879e+05      7.99e-04\npolygon 273              85  6.74995e+05      8.63e-04\npolygon 274             123  2.33068e+06      2.98e-03\npolygon 275              68  1.09322e+06      1.40e-03\npolygon 276              83  1.86187e+06      2.38e-03\npolygon 277              45  9.09420e+05      1.16e-03\npolygon 278             107  2.11479e+06      2.70e-03\npolygon 279             204  3.33419e+06      4.26e-03\npolygon 280              59  1.51553e+06      1.94e-03\npolygon 281              60  9.44998e+05      1.21e-03\npolygon 282             189  1.99078e+06      2.55e-03\npolygon 283              91  1.49663e+04      1.91e-05\npolygon 284              71  8.18741e+03      1.05e-05\npolygon 285              83  1.64142e+06      2.10e-03\npolygon 286             173  1.65258e+05      2.11e-04\npolygon 287              83  2.25924e+06      2.89e-03\npolygon 288             221  3.86033e+06      4.94e-03\npolygon 289              58  8.59179e+05      1.10e-03\npolygon 290              63  5.46403e+05      6.99e-04\npolygon 291              71  1.94861e+06      2.49e-03\npolygon 292              87  1.07862e+06      1.38e-03\npolygon 293              99  6.87931e+05      8.80e-04\npolygon 294             151  3.02315e+06      3.87e-03\npolygon 295              35  4.41738e+05      5.65e-04\npolygon 296              62  9.70064e+05      1.24e-03\npolygon 297              93  1.23590e+06      1.58e-03\npolygon 298             100  1.63967e+06      2.10e-03\npolygon 299             106  2.54311e+06      3.25e-03\npolygon 300              83  9.55710e+05      1.22e-03\npolygon 301              58  3.16883e+05      4.05e-04\npolygon 302              94  1.04642e+06      1.34e-03\npolygon 303              63  9.21433e+05      1.18e-03\npolygon 304             149  7.37056e+06      9.43e-03\npolygon 305              52  6.84703e+05      8.76e-04\npolygon 306             126  1.51148e+06      1.93e-03\npolygon 307             151  2.45910e+06      3.14e-03\npolygon 308             191  7.03480e+06      9.00e-03\npolygon 309             158  3.65203e+06      4.67e-03\npolygon 310             285  1.71971e+06      2.20e-03\npolygon 311 (hole)        3 -2.86414e-01     -3.66e-10\npolygon 312              84  1.08864e+06      1.39e-03\npolygon 313              81  1.56904e+06      2.01e-03\npolygon 314             174  1.67003e+06      2.14e-03\npolygon 315              79  2.39108e+06      3.06e-03\npolygon 316              52  1.37871e+06      1.76e-03\npolygon 317             100  9.23214e+05      1.18e-03\npolygon 318             246  5.32542e+06      6.81e-03\npolygon 319              92  1.41829e+06      1.81e-03\npolygon 320              50  1.48925e+06      1.90e-03\npolygon 321             117  5.18612e+06      6.63e-03\npolygon 322             532  3.50960e+07      4.49e-02\npolygon 323              80  1.46328e+06      1.87e-03\npolygon 324             258  9.95947e+05      1.27e-03\npolygon 325              55  1.45551e+06      1.86e-03\npolygon 326              44  1.49911e+06      1.92e-03\npolygon 327              68  9.24865e+05      1.18e-03\npolygon 328             127  1.34017e+06      1.71e-03\npolygon 329             348  8.50444e+06      1.09e-02\npolygon 330 (hole)      316 -5.11288e+04     -6.54e-05\npolygon 331             208  1.36000e+06      1.74e-03\npolygon 332              67  1.43137e+05      1.83e-04\npolygon 333              64  4.36369e+05      5.58e-04\npolygon 334               3  6.54649e-01      8.37e-10\npolygon 335             130  1.25974e+06      1.61e-03\npolygon 336             112  3.29141e+06      4.21e-03\npolygon 337             102  1.57600e+06      2.02e-03\npolygon 338             122  1.66547e+06      2.13e-03\npolygon 339              94  1.76709e+06      2.26e-03\npolygon 340            1831  6.97053e+07      8.91e-02\npolygon 341              30  2.80002e+04      3.58e-05\npolygon 342              27  1.50311e+04      1.92e-05\npolygon 343              95  2.05005e+06      2.62e-03\npolygon 344             129  1.51776e+06      1.94e-03\npolygon 345             117  5.95652e+05      7.62e-04\npolygon 346             263  3.28413e+06      4.20e-03\npolygon 347             118  2.55346e+06      3.27e-03\npolygon 348              49  9.62437e+05      1.23e-03\npolygon 349             112  1.28130e+06      1.64e-03\npolygon 350              26  7.58119e+05      9.70e-04\npolygon 351              76  9.05921e+05      1.16e-03\npolygon 352             285  1.61128e+06      2.06e-03\npolygon 353              65  1.26165e+06      1.61e-03\npolygon 354            1596  1.74949e+07      2.24e-02\npolygon 355 (hole)        3 -1.23053e-04     -1.57e-13\npolygon 356             164  3.45046e+06      4.41e-03\npolygon 357              65  1.74196e+06      2.23e-03\npolygon 358              74  1.39487e+06      1.78e-03\npolygon 359             141  1.07438e+06      1.37e-03\npolygon 360             668  5.40368e+07      6.91e-02\npolygon 361              77  3.29940e+05      4.22e-04\npolygon 362             708  1.28815e+07      1.65e-02\npolygon 363              44  2.26583e+03      2.90e-06\npolygon 364             181  7.23582e+06      9.25e-03\npolygon 365             192  2.14709e+06      2.75e-03\npolygon 366              90  1.51100e+06      1.93e-03\npolygon 367             125  9.36415e+05      1.20e-03\npolygon 368             148  1.64863e+06      2.11e-03\npolygon 369             102  1.09939e+06      1.41e-03\npolygon 370              77  2.20921e+06      2.83e-03\npolygon 371              79  1.26438e+06      1.62e-03\npolygon 372              75  2.20669e+06      2.82e-03\npolygon 373              40  1.26592e+06      1.62e-03\npolygon 374             720  3.71479e+07      4.75e-02\npolygon 375             111  3.91607e+06      5.01e-03\npolygon 376             148  2.17538e+06      2.78e-03\npolygon 377             131  3.62184e+06      4.63e-03\npolygon 378              80  1.43291e+06      1.83e-03\npolygon 379             112  4.38713e+06      5.61e-03\npolygon 380             145  1.20081e+06      1.54e-03\npolygon 381             531  2.45079e+06      3.13e-03\npolygon 382 (hole)        3 -1.78426e-03     -2.28e-12\npolygon 383 (hole)        3 -2.25260e+00     -2.88e-09\npolygon 384             125  1.54074e+06      1.97e-03\npolygon 385             378  1.63581e+06      2.09e-03\npolygon 386             357  2.24138e+06      2.87e-03\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n```\n:::\n:::\n\n\n#### Creating PPP object (Hawker Centres)\n\nNow, we would convert the data on different hawker centres in Singapore to PPP format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_centres_ppp <- as(hawker_centre_pts_sp, \"ppp\")\nplot(hawker_centres_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(hawker_centres_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPlanar point pattern:  5818 points\nAverage intensity 8.539384e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [12287.77, 45225.29] x [27687.23, 48372.26] units\n                    (32940 x 20690 units)\nWindow area = 681314000 square units\n```\n:::\n:::\n\n\nTo ensure that all our points are accurately in the desired range of our study area, we would be binding the hawker centres ppp object to the Singapore owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers_SG_ppp = hawker_centres_ppp[singapore_owin]\nplot(hawkers_SG_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nNext we would be converting the unit of scale to kilometers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkers_SG_ppp <- rescale(hawkers_SG_ppp, 1000, \"km\")\n```\n:::\n\n\n## First-Order Spatial-Point Analysis: Kernel Density\n\n#### Finding Kernel Density\n\nFinding the kernel density of hawker centres all across Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_hawkers_bw <- density(hawkers_SG_ppp, sigma=0.8, edge=TRUE, kernel=\"gaussian\")\nplot(kde_hawkers_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nDifferent bandwith tests\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.CvL(hawkers_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   sigma \n6.177942 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.scott(hawkers_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n sigma.x  sigma.y \n1.496867 1.021742 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.ppl(hawkers_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     sigma \n0.09078989 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.diggle(hawkers_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      sigma \n0.006399932 \n```\n:::\n:::\n\n\nFilter by food option and planning area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_df <- hawkers_all_regions[\n  grepl(\"roast\", hawkers_all_regions$`Hawker Centre Stalls`, ignore.case = TRUE) &\n  hawkers_all_regions$REGION_N == \"CENTRAL REGION\", \n]\n```\n:::\n\n\n## Diving Deeper (EDA + Playing Around):\n\nWe could even filter out different areas within Singapore. the example below includes filtering by region i.e. the central region in Singapore\n\n#### Creating an OWIN Object (Central Region) \n\nRepeating the same process\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_central_region <- singapore_mpsz %>%\n  filter(REGION_N == \"CENTRAL REGION\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_sp <- as_Spatial(sg_central_region)\ncentral_sp = as(central_sp, \"SpatialPolygons\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_owin = as(central_sp, \"owin\")\nplot(central_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n#### Creating an OWIN Object (Bukit Merah)\n\nIn addition to just the different regions of Singapore, we could also zoom in and dive into individual planning areas of Singapore to gauge second order spatial point pattens within Bukit Merah.\n\nRepeating the same process\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbukit_merah <- singapore_mpsz %>%\n  filter(PLN_AREA_N == \"BUKIT MERAH\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBM_sp <- as_Spatial(bukit_merah)\nBM_sp = as(BM_sp, \"SpatialPolygons\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBM_owin = as(BM_sp, \"owin\")\nplot(BM_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n#### Creating an PPP Object (Filtering by Food) \n\nWithin our dataset, we could also filter out some of the finest culinary delicacies eg. Ban Mian, Lor Mee, Chicken Rice etc.\n\nFiltering out all roasted meat places in Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroasted_meat <- complete_filtered_hawker_stalls_data_sf[\n  grepl(\"roast\", complete_filtered_hawker_stalls_data_sf$`Hawker Centre Stalls`, ignore.case = TRUE), \n]\n```\n:::\n\n\nConverting the points of all roasted meat hawker stalls in Singapore to the SP format in the form of spatial points. When plotted on a map, we would be able to see the different hawker centres in Singapore with stalls that serve the cantonese style roasted meats\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroasted_meat_sp <- as_Spatial(roasted_meat)\nroasted_meat_sp = as(roasted_meat_sp, \"SpatialPoints\")\n```\n:::\n\n\nConverting the SP object to a PPP object (roasted_meat_ppp)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroasted_meat_ppp <- as(roasted_meat_sp, \"ppp\")\nplot(roasted_meat_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## Second-Order Spatial Point Pattern Analysis\n\nNow, we would be doing a second order spatial point analysis on all hawker centres in the central area that serve roasted meat i.e. we would be filtering all hawker centres in the central area that have stalls serving roasted meats.\n\nBinding the roasted meats ppp object to the central area owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroasted_meat_central_ppp = roasted_meat_ppp[central_owin]\nplot(roasted_meat_central_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nSimilarly, we could also restrict our study area to just the planning area of Bukit Merah\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroasted_meat_BM_ppp = roasted_meat_ppp[BM_owin]\nplot(roasted_meat_BM_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nHowever, for the course of our study we would be using the central area.\n\n#### G-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_C = Gest(roasted_meat_central_ppp, correction = \"border\")\nplot(G_C, xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nG_C.csr <- envelope(roasted_meat_central_ppp, Gest, nsim = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(G_C.csr)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n#### F-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_C = Fest(roasted_meat_central_ppp)\nplot(F_C)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nF_C.csr <- envelope(roasted_meat_central_ppp, Fest, nsim = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(F_C.csr)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n#### K-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_C = Kest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(K_C, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nK_C.csr <- envelope(roasted_meat_central_ppp, Kest, nsim = 20, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGenerating 20 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n20.\n\nDone.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(K_C.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n#### L-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_C = Lest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(L_C, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nL_C.csr <- envelope(roasted_meat_central_ppp, Lest, nsim = 20, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGenerating 20 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n20.\n\nDone.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(L_C.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n## **Potential Inputs for shiny app (To analyse second-order spatial point patterns):** \n\n-   Filter by region: Central, East, West, North, Northeast\n\n-   Filter by planning area: Downtown Core, Rochor, Bukit Merah, Geylang\n\n-   Filter by dish: Lor Mee, Roasted Meat, Ban Mian, Chicken Rice\n\n-   Filter by Dietary Restrictions\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}