[
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Take_home_Ex03 test",
    "section": "",
    "text": "#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly, stringr, spatstat, maptools, raster)\n\n\nsingapore_mpsz = st_read(\"D:/Kabeer2003/GAA Project Group 5/GAA-Project-2024-Group-5-/data/geospatial/MP14_SUBZONE_WEB_PL.shp\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Kabeer2003\\GAA Project Group 5\\GAA-Project-2024-Group-5-\\data\\geospatial\\MP14_SUBZONE_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ncrs_info1 &lt;- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"SVY21\"\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, crs = 4326)\n\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncrs_info1 &lt;- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\n\n#mrt_lines = st_read(\"D:/Kabeer2003/GAA Project Group #5/GAA-Project-2024-Group-5-/data/geospatial/gis_osm_railways_free_1.shp\")\n\n\nhawker_centres = read_csv(\"D:/Kabeer2003/GAA Project Group 5/GAA-Project-2024-Group-5-/data/aspatial/updated_hawker_centres.csv\")\n\n\nhawker_stalls = read_csv(\"D:/Kabeer2003/GAA Project Group 5/GAA-Project-2024-Group-5-/data/aspatial/updated_hawker_stalls.csv\")\n\n\nif(is.numeric(hawker_centres$`Postal Code`)) {\n  hawker_centres$`Postal Code` &lt;- as.character(hawker_centres$`Postal Code`)\n}\n\n# Convert the 'Postal Code' column in hawker_stalls to character if it's numeric\nif(is.numeric(hawker_stalls$`Postal Code`)) {\n  hawker_stalls$`Postal Code` &lt;- as.character(hawker_stalls$`Postal Code`)\n}\n\n\ncombined_data &lt;- left_join(hawker_centres, hawker_stalls, by = \"Postal Code\")\n\n\nhawker_stalls_data_filtered &lt;- combined_data %&gt;%\n  dplyr::select(`Postal Code`, `Hawker Centres`, Longitude, Latitude, `Hawker Centre Stalls`)\n\n\nfiltered_hawker_stalls_data_clean &lt;- hawker_stalls_data_filtered[!is.na(hawker_stalls_data_filtered$Longitude) & !is.na(hawker_stalls_data_filtered$Latitude), ]\n\n\nfiltered_hawker_stalls_data_sf &lt;- st_as_sf(filtered_hawker_stalls_data_clean, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n\n\ncrs_info2 &lt;- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n\n$input\n[1] \"EPSG:4326\"\n\nfiltered_hawker_stalls_data_sf &lt;- st_transform(filtered_hawker_stalls_data_sf, crs = 4326)\n\ncrs_info2 &lt;- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\n\nfiltered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(!is.na(`Hawker Centre Stalls`))\n\n\nfiltered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(!grepl(\"Back to\", `Hawker Centre Stalls`))\n\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(grepl(\"#\", `Hawker Centre Stalls`))\n\n\ncrs_info3 &lt;- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n\n$input\n[1] \"EPSG:4326\"\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\n\ncrs_info3 &lt;- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, 4326)\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n\n\nhawkers_united = st_join(singapore_mpsz, complete_filtered_hawker_stalls_data_sf)\n\n\nhawkers_by_region &lt;- hawkers_united %&gt;%\n  dplyr::select(`PLN_AREA_N`, `REGION_N`, `Postal Code`, `Hawker Centres`, `Hawker Centre Stalls`, geometry)\n\n\nhawkers_all_regions &lt;- hawkers_by_region %&gt;%\n  filter(!is.na(`Postal Code`))\n\n\ntmap_mode(\"plot\")\ntm_shape(singapore_mpsz) +\n  tm_polygons() + \ntm_shape(hawkers_all_regions) +\n  tm_dots(col = \"red\", size = 0.1)\n\n\n\n\n\ndirectory_path &lt;- \"D:/Kabeer2003/GAA Project Group 5/GAA-Project-2024-Group-5-/data\"\n\nif (!dir.exists(directory_path)) {\n  dir.create(directory_path, recursive = TRUE)\n}\n\nwrite_rds(hawkers_all_regions, file.path(directory_path, \"hawkers_all_regions.rds\"))\n\n\ntest &lt;- read_rds(\"D:/Kabeer2003/GAA Project Group 5/GAA-Project-2024-Group-5-/data/hawkers_all_regions.rds\")\n\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, 3414)\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 3414)\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n\n\nhawker_centre_pts &lt;- as_Spatial(complete_filtered_hawker_stalls_data_sf) \nsingapore_mpsz1 &lt;- as_Spatial(singapore_mpsz)\n\n\nhawker_centre_pts_sp &lt;- as(hawker_centre_pts, \"SpatialPoints\") \nsingapore_mpsz_sp &lt;- as(singapore_mpsz1, \"SpatialPolygons\")\n\n\nsingapore_owin &lt;- as(singapore_mpsz_sp, \"owin\")\nplot(singapore_owin)\n\n\n\n\n\nsummary(singapore_owin)\n\nWindow: polygonal boundary\n386 separate polygons (20 holes)\n                   vertices         area relative.area\npolygon 1               156  1.63038e+06      2.09e-03\npolygon 2               303  5.59816e+05      7.16e-04\npolygon 3                47  1.60809e+05      2.06e-04\npolygon 4                47  5.95423e+05      7.61e-04\npolygon 5                48  3.87430e+05      4.95e-04\npolygon 6                59  1.03038e+06      1.32e-03\npolygon 7                83  5.51731e+05      7.06e-04\npolygon 8                70  2.90185e+05      3.71e-04\npolygon 9               217  1.08479e+06      1.39e-03\npolygon 10               42  6.31643e+05      8.08e-04\npolygon 11              226  1.82685e+06      2.34e-03\npolygon 12               52  2.93711e+05      3.76e-04\npolygon 13              256  1.84406e+06      2.36e-03\npolygon 14              164  3.92563e+05      5.02e-04\npolygon 15              238  5.06591e+05      6.48e-04\npolygon 16               22  6.74620e+03      8.63e-06\npolygon 17               47  3.82089e+04      4.89e-05\npolygon 18               65  8.42861e+04      1.08e-04\npolygon 19              469  2.06120e+06      2.64e-03\npolygon 20              264  1.50631e+06      1.93e-03\npolygon 21             1149  3.30122e+07      4.22e-02\npolygon 22 (hole)        23 -1.25692e+03     -1.61e-06\npolygon 23                4  9.47128e+01      1.21e-07\npolygon 24               37  1.29491e+04      1.66e-05\npolygon 25               30  4.28953e+03      5.49e-06\npolygon 26              145  9.61783e+05      1.23e-03\npolygon 27              227  1.10308e+06      1.41e-03\npolygon 28               19  3.09219e+04      3.95e-05\npolygon 29               10  6.60201e+03      8.44e-06\npolygon 30              234  2.08755e+06      2.67e-03\npolygon 31               15  4.03288e+04      5.16e-05\npolygon 32             1045  4.44510e+06      5.68e-03\npolygon 33 (hole)        13 -3.92141e+02     -5.01e-07\npolygon 34              233  4.72887e+05      6.05e-04\npolygon 35               14  5.86528e+03      7.50e-06\npolygon 36               10  4.90997e+02      6.28e-07\npolygon 37               94  5.96175e+04      7.62e-05\npolygon 38               59  3.43163e+04      4.39e-05\npolygon 39 (hole)         3 -7.68533e-02     -9.83e-11\npolygon 40                4  2.69408e+02      3.45e-07\npolygon 41             1026  1.27782e+06      1.63e-03\npolygon 42              132  9.53360e+04      1.22e-04\npolygon 43                6  4.50376e+02      5.76e-07\npolygon 44              155  2.67503e+05      3.42e-04\npolygon 45              211  4.70522e+05      6.02e-04\npolygon 46              106  3.04131e+03      3.89e-06\npolygon 47               83  5.28926e+03      6.76e-06\npolygon 48             1462  4.87083e+06      6.23e-03\npolygon 49 (hole)        11 -8.36614e+01     -1.07e-07\npolygon 50               75  1.73525e+04      2.22e-05\npolygon 51              147  3.10396e+03      3.97e-06\npolygon 52              138  3.22285e+03      4.12e-06\npolygon 53               45  2.51228e+03      3.21e-06\npolygon 54               40  1.38603e+04      1.77e-05\npolygon 55              426  3.44964e+06      4.41e-03\npolygon 56               83  1.03237e+05      1.32e-04\npolygon 57              104  1.12730e+06      1.44e-03\npolygon 58              759  2.70301e+06      3.46e-03\npolygon 59 (hole)        28 -1.99840e+01     -2.56e-08\npolygon 60 (hole)        48 -1.38327e+02     -1.77e-07\npolygon 61 (hole)        20 -4.37607e+00     -5.60e-09\npolygon 62 (hole)       351 -1.21346e+03     -1.55e-06\npolygon 63               53  2.76828e+05      3.54e-04\npolygon 64              114  6.36655e+04      8.14e-05\npolygon 65               83  1.96620e+05      2.51e-04\npolygon 66               33  3.65334e+05      4.67e-04\npolygon 67              106  1.45483e+06      1.86e-03\npolygon 68              133  8.53203e+05      1.09e-03\npolygon 69              196  1.07072e+06      1.37e-03\npolygon 70               47  5.33016e+05      6.82e-04\npolygon 71               82  4.42501e+05      5.66e-04\npolygon 72              221  9.31409e+04      1.19e-04\npolygon 73               37  4.11723e+05      5.27e-04\npolygon 74              227  5.87221e+05      7.51e-04\npolygon 75               35  3.94370e+04      5.04e-05\npolygon 76               96  1.88768e+05      2.41e-04\npolygon 77               59  1.33007e+05      1.70e-04\npolygon 78               46  4.48128e+05      5.73e-04\npolygon 79               31  5.21199e+05      6.67e-04\npolygon 80               17  3.50788e+05      4.49e-04\npolygon 81               54  2.61841e+05      3.35e-04\npolygon 82              239  1.59034e+06      2.03e-03\npolygon 83              298  8.86957e+05      1.13e-03\npolygon 84              190  2.23207e+05      2.85e-04\npolygon 85              142  2.00053e+05      2.56e-04\npolygon 86              169  7.10568e+05      9.09e-04\npolygon 87               34  7.48683e+05      9.57e-04\npolygon 88              192  5.91779e+05      7.57e-04\npolygon 89              177  1.75595e+06      2.25e-03\npolygon 90              192  3.40742e+05      4.36e-04\npolygon 91              217  3.29438e+05      4.21e-04\npolygon 92               87  1.70664e+05      2.18e-04\npolygon 93              173  3.68483e+05      4.71e-04\npolygon 94              289  7.60191e+06      9.72e-03\npolygon 95              242  2.21974e+05      2.84e-04\npolygon 96              130  2.80176e+05      3.58e-04\npolygon 97              140  2.14251e+05      2.74e-04\npolygon 98               83  1.73123e+05      2.21e-04\npolygon 99               92  5.33671e+05      6.82e-04\npolygon 100              95  1.45518e+05      1.86e-04\npolygon 101              55  6.35706e+05      8.13e-04\npolygon 102              54  5.03226e+05      6.44e-04\npolygon 103              48  5.56817e+04      7.12e-05\npolygon 104              60  1.16331e+05      1.49e-04\npolygon 105             137  2.05165e+06      2.62e-03\npolygon 106             122  2.43459e+06      3.11e-03\npolygon 107             113  1.71362e+06      2.19e-03\npolygon 108              55  3.10515e+05      3.97e-04\npolygon 109              95  1.38665e+06      1.77e-03\npolygon 110             127  1.95186e+06      2.50e-03\npolygon 111             266  4.52473e+05      5.79e-04\npolygon 112              79  6.97507e+05      8.92e-04\npolygon 113              71  5.63055e+03      7.20e-06\npolygon 114              10  1.99759e+02      2.55e-07\npolygon 115             435  2.77052e+07      3.54e-02\npolygon 116               3  1.96470e-01      2.51e-10\npolygon 117             117  1.71719e+05      2.20e-04\npolygon 118             271  1.09784e+06      1.40e-03\npolygon 119             135  1.05350e+06      1.35e-03\npolygon 120             305  2.79600e+06      3.58e-03\npolygon 121             554  3.04972e+06      3.90e-03\npolygon 122 (hole)        3 -7.06427e-01     -9.03e-10\npolygon 123             137  3.36218e+05      4.30e-04\npolygon 124              62  7.41438e+05      9.48e-04\npolygon 125             319  4.60551e+05      5.89e-04\npolygon 126             198  5.43484e+05      6.95e-04\npolygon 127              52  2.78303e+05      3.56e-04\npolygon 128             539  1.76950e+06      2.26e-03\npolygon 129             149  3.85093e+05      4.92e-04\npolygon 130             120  5.58761e+05      7.15e-04\npolygon 131              88  5.67581e+06      7.26e-03\npolygon 132             212  2.09608e+06      2.68e-03\npolygon 133              88  7.22591e+05      9.24e-04\npolygon 134             277  2.55046e+06      3.26e-03\npolygon 135              34  2.04263e+06      2.61e-03\npolygon 136              70  3.26041e+06      4.17e-03\npolygon 137             214  1.34615e+06      1.72e-03\npolygon 138              25  1.71337e+05      2.19e-04\npolygon 139              84  4.96255e+04      6.35e-05\npolygon 140             198  1.93991e+05      2.48e-04\npolygon 141              77  1.20171e+05      1.54e-04\npolygon 142             272  8.50853e+05      1.09e-03\npolygon 143              99  1.02647e+06      1.31e-03\npolygon 144             154  1.67538e+05      2.14e-04\npolygon 145              81  1.16002e+06      1.48e-03\npolygon 146              32  2.56100e+06      3.28e-03\npolygon 147             112  7.35502e+05      9.41e-04\npolygon 148             124  9.48159e+05      1.21e-03\npolygon 149             134  1.32109e+06      1.69e-03\npolygon 150              59  2.99730e+06      3.83e-03\npolygon 151             122  1.37683e+06      1.76e-03\npolygon 152             129  1.92662e+06      2.46e-03\npolygon 153             513  3.20330e+06      4.10e-03\npolygon 154 (hole)        3 -2.51044e-02     -3.21e-11\npolygon 155              92  2.34937e+06      3.00e-03\npolygon 156              85  9.63202e+05      1.23e-03\npolygon 157              35  4.85023e+05      6.20e-04\npolygon 158              82  1.88130e+06      2.41e-03\npolygon 159             103  1.42508e+06      1.82e-03\npolygon 160              60  2.38727e+06      3.05e-03\npolygon 161             114  1.07899e+06      1.38e-03\npolygon 162              71  4.59544e+05      5.88e-04\npolygon 163              90  2.47889e+05      3.17e-04\npolygon 164             106  2.13582e+05      2.73e-04\npolygon 165             205  2.47265e+06      3.16e-03\npolygon 166 (hole)        3 -4.87319e-02     -6.23e-11\npolygon 167 (hole)        3 -3.81487e-03     -4.88e-12\npolygon 168 (hole)       36 -7.79901e+03     -9.97e-06\npolygon 169               4  1.46442e-02      1.87e-11\npolygon 170             573  1.94069e+06      2.48e-03\npolygon 171 (hole)        4 -2.14740e-02     -2.75e-11\npolygon 172             348  2.11850e+06      2.71e-03\npolygon 173             109  4.85049e+05      6.20e-04\npolygon 174             102  7.57905e+05      9.69e-04\npolygon 175             119  3.51243e+05      4.49e-04\npolygon 176              69  1.31292e+06      1.68e-03\npolygon 177 (hole)        3 -3.72872e-02     -4.77e-11\npolygon 178              63  9.46648e+05      1.21e-03\npolygon 179             100  7.48039e+05      9.57e-04\npolygon 180             110  1.02229e+06      1.31e-03\npolygon 181              95  4.10995e+05      5.26e-04\npolygon 182              73  8.39489e+05      1.07e-03\npolygon 183             173  1.22849e+06      1.57e-03\npolygon 184              43  5.54625e+05      7.09e-04\npolygon 185             130  3.39290e+06      4.34e-03\npolygon 186              97  1.87809e+06      2.40e-03\npolygon 187              40  8.67749e+05      1.11e-03\npolygon 188              55  6.39144e+05      8.17e-04\npolygon 189              39  3.26015e+06      4.17e-03\npolygon 190              54  4.11402e+05      5.26e-04\npolygon 191              75  4.18656e+05      5.35e-04\npolygon 192             104  2.09818e+06      2.68e-03\npolygon 193              91  1.52455e+06      1.95e-03\npolygon 194              79  8.13382e+05      1.04e-03\npolygon 195              94  1.48429e+06      1.90e-03\npolygon 196             118  3.10803e+06      3.97e-03\npolygon 197              97  1.03728e+06      1.33e-03\npolygon 198             157  2.82017e+06      3.61e-03\npolygon 199              53  9.24760e+05      1.18e-03\npolygon 200             118  1.80655e+06      2.31e-03\npolygon 201              64  1.40454e+06      1.80e-03\npolygon 202              91  2.37934e+06      3.04e-03\npolygon 203             111  2.07780e+06      2.66e-03\npolygon 204             134  3.14295e+06      4.02e-03\npolygon 205             195  2.63648e+06      3.37e-03\npolygon 206              80  1.05717e+06      1.35e-03\npolygon 207              56  1.28795e+06      1.65e-03\npolygon 208              69  4.39648e+05      5.62e-04\npolygon 209              50  7.46884e+05      9.55e-04\npolygon 210              61  4.46241e+05      5.71e-04\npolygon 211              72  5.72500e+05      7.32e-04\npolygon 212             152  2.95937e+06      3.78e-03\npolygon 213             119  2.15829e+06      2.76e-03\npolygon 214             140  1.34746e+06      1.72e-03\npolygon 215              60  2.33891e+06      2.99e-03\npolygon 216             111  4.29714e+06      5.50e-03\npolygon 217             105  9.91041e+05      1.27e-03\npolygon 218             202  2.04955e+06      2.62e-03\npolygon 219             126  2.57909e+06      3.30e-03\npolygon 220              91  3.18758e+06      4.08e-03\npolygon 221              40  9.06316e+05      1.16e-03\npolygon 222              41  3.80204e+05      4.86e-04\npolygon 223              92  5.26383e+05      6.73e-04\npolygon 224              77  8.00299e+05      1.02e-03\npolygon 225             124  8.98563e+05      1.15e-03\npolygon 226             172  1.79346e+06      2.29e-03\npolygon 227             371  3.18810e+06      4.08e-03\npolygon 228              85  4.94502e+05      6.32e-04\npolygon 229              79  1.06189e+06      1.36e-03\npolygon 230              74  1.79446e+06      2.29e-03\npolygon 231              96  3.47521e+06      4.44e-03\npolygon 232              74  1.22567e+06      1.57e-03\npolygon 233             139  1.97438e+06      2.52e-03\npolygon 234             159  1.08508e+06      1.39e-03\npolygon 235              90  1.96414e+06      2.51e-03\npolygon 236              43  1.97494e+06      2.53e-03\npolygon 237             141  4.14132e+06      5.30e-03\npolygon 238             164  4.33983e+06      5.55e-03\npolygon 239             131  1.79606e+06      2.30e-03\npolygon 240             130  2.25115e+06      2.88e-03\npolygon 241             124  7.76141e+05      9.93e-04\npolygon 242             105  2.20631e+06      2.82e-03\npolygon 243             106  1.18013e+06      1.51e-03\npolygon 244              73  1.22990e+06      1.57e-03\npolygon 245             101  9.64681e+05      1.23e-03\npolygon 246              75  1.26341e+06      1.62e-03\npolygon 247              50  3.69771e+05      4.73e-04\npolygon 248              83  3.20366e+06      4.10e-03\npolygon 249              96  1.10727e+06      1.42e-03\npolygon 250              81  1.28739e+06      1.65e-03\npolygon 251              32  8.42672e+05      1.08e-03\npolygon 252              61  1.33353e+06      1.71e-03\npolygon 253              50  1.00740e+06      1.29e-03\npolygon 254             147  8.94517e+05      1.14e-03\npolygon 255              76  9.11208e+05      1.17e-03\npolygon 256              43  1.14382e+06      1.46e-03\npolygon 257              95  1.32887e+06      1.70e-03\npolygon 258             111  6.09896e+05      7.80e-04\npolygon 259              66  7.63181e+05      9.76e-04\npolygon 260             164  2.76835e+06      3.54e-03\npolygon 261             134  3.46704e+06      4.43e-03\npolygon 262             401  7.83399e+06      1.00e-02\npolygon 263              80  2.77864e+06      3.55e-03\npolygon 264              54  8.62737e+05      1.10e-03\npolygon 265             105  1.58344e+06      2.03e-03\npolygon 266              43  8.46135e+05      1.08e-03\npolygon 267             122  1.74439e+06      2.23e-03\npolygon 268              89  1.00159e+06      1.28e-03\npolygon 269              82  1.09730e+06      1.40e-03\npolygon 270             251  4.84852e+06      6.20e-03\npolygon 271              53  6.68456e+05      8.55e-04\npolygon 272              69  6.24879e+05      7.99e-04\npolygon 273              85  6.74995e+05      8.63e-04\npolygon 274             123  2.33068e+06      2.98e-03\npolygon 275              68  1.09322e+06      1.40e-03\npolygon 276              83  1.86187e+06      2.38e-03\npolygon 277              45  9.09420e+05      1.16e-03\npolygon 278             107  2.11479e+06      2.70e-03\npolygon 279             204  3.33419e+06      4.26e-03\npolygon 280              59  1.51553e+06      1.94e-03\npolygon 281              60  9.44998e+05      1.21e-03\npolygon 282             189  1.99078e+06      2.55e-03\npolygon 283              91  1.49663e+04      1.91e-05\npolygon 284              71  8.18741e+03      1.05e-05\npolygon 285              83  1.64142e+06      2.10e-03\npolygon 286             173  1.65258e+05      2.11e-04\npolygon 287              83  2.25924e+06      2.89e-03\npolygon 288             221  3.86033e+06      4.94e-03\npolygon 289              58  8.59179e+05      1.10e-03\npolygon 290              63  5.46403e+05      6.99e-04\npolygon 291              71  1.94861e+06      2.49e-03\npolygon 292              87  1.07862e+06      1.38e-03\npolygon 293              99  6.87931e+05      8.80e-04\npolygon 294             151  3.02315e+06      3.87e-03\npolygon 295              35  4.41738e+05      5.65e-04\npolygon 296              62  9.70064e+05      1.24e-03\npolygon 297              93  1.23590e+06      1.58e-03\npolygon 298             100  1.63967e+06      2.10e-03\npolygon 299             106  2.54311e+06      3.25e-03\npolygon 300              83  9.55710e+05      1.22e-03\npolygon 301              58  3.16883e+05      4.05e-04\npolygon 302              94  1.04642e+06      1.34e-03\npolygon 303              63  9.21433e+05      1.18e-03\npolygon 304             149  7.37056e+06      9.43e-03\npolygon 305              52  6.84703e+05      8.76e-04\npolygon 306             126  1.51148e+06      1.93e-03\npolygon 307             151  2.45910e+06      3.14e-03\npolygon 308             191  7.03480e+06      9.00e-03\npolygon 309             158  3.65203e+06      4.67e-03\npolygon 310             285  1.71971e+06      2.20e-03\npolygon 311 (hole)        3 -2.86414e-01     -3.66e-10\npolygon 312              84  1.08864e+06      1.39e-03\npolygon 313              81  1.56904e+06      2.01e-03\npolygon 314             174  1.67003e+06      2.14e-03\npolygon 315              79  2.39108e+06      3.06e-03\npolygon 316              52  1.37871e+06      1.76e-03\npolygon 317             100  9.23214e+05      1.18e-03\npolygon 318             246  5.32542e+06      6.81e-03\npolygon 319              92  1.41829e+06      1.81e-03\npolygon 320              50  1.48925e+06      1.90e-03\npolygon 321             117  5.18612e+06      6.63e-03\npolygon 322             532  3.50960e+07      4.49e-02\npolygon 323              80  1.46328e+06      1.87e-03\npolygon 324             258  9.95947e+05      1.27e-03\npolygon 325              55  1.45551e+06      1.86e-03\npolygon 326              44  1.49911e+06      1.92e-03\npolygon 327              68  9.24865e+05      1.18e-03\npolygon 328             127  1.34017e+06      1.71e-03\npolygon 329             348  8.50444e+06      1.09e-02\npolygon 330 (hole)      316 -5.11288e+04     -6.54e-05\npolygon 331             208  1.36000e+06      1.74e-03\npolygon 332              67  1.43137e+05      1.83e-04\npolygon 333              64  4.36369e+05      5.58e-04\npolygon 334               3  6.54649e-01      8.37e-10\npolygon 335             130  1.25974e+06      1.61e-03\npolygon 336             112  3.29141e+06      4.21e-03\npolygon 337             102  1.57600e+06      2.02e-03\npolygon 338             122  1.66547e+06      2.13e-03\npolygon 339              94  1.76709e+06      2.26e-03\npolygon 340            1831  6.97053e+07      8.91e-02\npolygon 341              30  2.80002e+04      3.58e-05\npolygon 342              27  1.50311e+04      1.92e-05\npolygon 343              95  2.05005e+06      2.62e-03\npolygon 344             129  1.51776e+06      1.94e-03\npolygon 345             117  5.95652e+05      7.62e-04\npolygon 346             263  3.28413e+06      4.20e-03\npolygon 347             118  2.55346e+06      3.27e-03\npolygon 348              49  9.62437e+05      1.23e-03\npolygon 349             112  1.28130e+06      1.64e-03\npolygon 350              26  7.58119e+05      9.70e-04\npolygon 351              76  9.05921e+05      1.16e-03\npolygon 352             285  1.61128e+06      2.06e-03\npolygon 353              65  1.26165e+06      1.61e-03\npolygon 354            1596  1.74949e+07      2.24e-02\npolygon 355 (hole)        3 -1.23053e-04     -1.57e-13\npolygon 356             164  3.45046e+06      4.41e-03\npolygon 357              65  1.74196e+06      2.23e-03\npolygon 358              74  1.39487e+06      1.78e-03\npolygon 359             141  1.07438e+06      1.37e-03\npolygon 360             668  5.40368e+07      6.91e-02\npolygon 361              77  3.29940e+05      4.22e-04\npolygon 362             708  1.28815e+07      1.65e-02\npolygon 363              44  2.26583e+03      2.90e-06\npolygon 364             181  7.23582e+06      9.25e-03\npolygon 365             192  2.14709e+06      2.75e-03\npolygon 366              90  1.51100e+06      1.93e-03\npolygon 367             125  9.36415e+05      1.20e-03\npolygon 368             148  1.64863e+06      2.11e-03\npolygon 369             102  1.09939e+06      1.41e-03\npolygon 370              77  2.20921e+06      2.83e-03\npolygon 371              79  1.26438e+06      1.62e-03\npolygon 372              75  2.20669e+06      2.82e-03\npolygon 373              40  1.26592e+06      1.62e-03\npolygon 374             720  3.71479e+07      4.75e-02\npolygon 375             111  3.91607e+06      5.01e-03\npolygon 376             148  2.17538e+06      2.78e-03\npolygon 377             131  3.62184e+06      4.63e-03\npolygon 378              80  1.43291e+06      1.83e-03\npolygon 379             112  4.38713e+06      5.61e-03\npolygon 380             145  1.20081e+06      1.54e-03\npolygon 381             531  2.45079e+06      3.13e-03\npolygon 382 (hole)        3 -1.78426e-03     -2.28e-12\npolygon 383 (hole)        3 -2.25260e+00     -2.88e-09\npolygon 384             125  1.54074e+06      1.97e-03\npolygon 385             378  1.63581e+06      2.09e-03\npolygon 386             357  2.24138e+06      2.87e-03\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\n\nhawker_centres_ppp &lt;- as(hawker_centre_pts_sp, \"ppp\")\nplot(hawker_centres_ppp)\n\n\n\n\n\nsummary(hawker_centres_ppp)\n\nPlanar point pattern:  5818 points\nAverage intensity 8.539384e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [12287.77, 45225.29] x [27687.23, 48372.26] units\n                    (32940 x 20690 units)\nWindow area = 681314000 square units\n\n\n\nhawkers_SG_ppp = hawker_centres_ppp[singapore_owin]\nplot(hawkers_SG_ppp)\n\n\n\n\n\nhawkers_SG_ppp &lt;- rescale(hawkers_SG_ppp, 1000, \"km\")\n\n\nkde_hawkers_bw &lt;- density(hawkers_SG_ppp, sigma=0.8, edge=TRUE, kernel=\"gaussian\")\nplot(kde_hawkers_bw)\n\n\n\n\n\nbw.CvL(hawkers_SG_ppp)\n\n   sigma \n6.177942 \n\n\n\nbw.scott(hawkers_SG_ppp)\n\n sigma.x  sigma.y \n1.496867 1.021742 \n\n\n\nbw.ppl(hawkers_SG_ppp)\n\n     sigma \n0.09078989 \n\n\n\nbw.diggle(hawkers_SG_ppp)\n\n      sigma \n0.006399932 \n\n\nFilter by food option and planning area\n\nfiltered_df &lt;- hawkers_all_regions[\n  grepl(\"roast\", hawkers_all_regions$`Hawker Centre Stalls`, ignore.case = TRUE) &\n  hawkers_all_regions$REGION_N == \"CENTRAL REGION\", \n]\n\n\nsg_central_region &lt;- singapore_mpsz %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\n\ncentral_sp &lt;- as_Spatial(sg_central_region)\ncentral_sp = as(central_sp, \"SpatialPolygons\")\n\n\ncentral_owin = as(central_sp, \"owin\")\nplot(central_owin)\n\n\n\n\n\nbukit_merah &lt;- singapore_mpsz %&gt;%\n  filter(PLN_AREA_N == \"BUKIT MERAH\")\n\n\nBM_sp &lt;- as_Spatial(bukit_merah)\nBM_sp = as(BM_sp, \"SpatialPolygons\")\n\n\nBM_owin = as(BM_sp, \"owin\")\nplot(BM_owin)\n\n\n\n\n\nroasted_meat &lt;- complete_filtered_hawker_stalls_data_sf[\n  grepl(\"roast\", complete_filtered_hawker_stalls_data_sf$`Hawker Centre Stalls`, ignore.case = TRUE), \n]\n\n\nroasted_meat_sp &lt;- as_Spatial(roasted_meat)\nroasted_meat_sp = as(roasted_meat_sp, \"SpatialPoints\")\n\n\nroasted_meat_ppp &lt;- as(roasted_meat_sp, \"ppp\")\nplot(roasted_meat_ppp)\n\n\n\n\n\nroasted_meat_central_ppp = roasted_meat_ppp[central_owin]\nplot(roasted_meat_central_ppp)\n\n\n\n\n\nroasted_meat_BM_ppp = roasted_meat_ppp[BM_owin]\nplot(roasted_meat_BM_ppp)\n\n\n\n\n\nG_C = Gest(roasted_meat_central_ppp, correction = \"border\")\nplot(G_C, xlim=c(0,1000))\n\n\n\n\n\nF_C = Fest(roasted_meat_central_ppp)\nplot(F_C)\n\n\n\n\n\nF_C.csr &lt;- envelope(roasted_meat_central_ppp, Fest, nsim = 500)\n\nGenerating 500 simulations of CSR  ...\n1, 2, 3, .5....10....15....20....25....30....35....40....45....50..\n..55....60....65....70....75....80....85....90....95....100....105....110\n....115....120....125....130....135....140....145....150....155....160....165...\n.170....175....180....185....190....195....200....205....210....215....220....225.\n...230....235....240....245....250....255....260....265....270....275....280....\n285....290....295....300....305....310....315....320....325....330....335....340..\n..345....350....355....360....365....370....375....380....385....390....395....400\n....405....410....415....420....425....430....435....440....445....450....455...\n.460....465....470....475....480....485....490....495....\n500.\n\nDone.\n\n\n\nplot(F_C.csr)\n\n\n\n\n\nK_c = Kest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(K_c, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_c = Lest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(L_c, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nInputs: Filter by region: Central, East, West, North, Northeast Filter by planning area: Downtown Core, Rochor, Bukit Merah, Geylang Filter by food: Lor Mee, Roasted Meat, Ban Mian, Chicken Rice Filter by Dietary Restrictions"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-relevant-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-relevant-r-packages",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-and-preparing-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-and-preparing-data",
    "title": "Take-home_Ex02",
    "section": "Importing and preparing data",
    "text": "Importing and preparing data\n\nImporting and Filtering Geospatial Data (TAINAN_VILLAGE.shp)\nImporting the Taiwan shapefile\n\nTaiwan_mpsz &lt;- st_read(dsn =\"data/geospatial/TAINAN_VILLAGE.shp\")\n\nReading layer `TAINAN_VILLAGE' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial\\TAINAN_VILLAGE.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97\n\n\nTransforming the Coordinate Reference System from TWD97 to WGS84 to ensure that our geospatial data and aspatial data are compatible with each other. For the scope of this study, we would be using WGS84 as the coordinate reference system.\n\ncrs_info1 &lt;- st_crs(Taiwan_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"TWD97\"\n\nTaiwan_mpsz &lt;- st_transform(Taiwan_mpsz, crs = 4326)\n\ncrs_info1 &lt;- st_crs(Taiwan_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\nSince the scope of our analysis is limited to the 8 regions below, we would be filtering the relevant regions using their TownID to zoom our study into specific areas of Tainan\n\nfiltered_regions_mpsz &lt;- Taiwan_mpsz %&gt;%\n  filter(TOWNID %in% c(\"D01\", \"D02\", \"D04\", \"D06\", \"D07\", \"D08\", \"D32\", \"D39\"))\n\n\n\nImporting and Transforming Aspatial Data\nReading the csv file with dengue cases over a period of time from 1998 to 2024 (Our Aspatial Data)\n\ndengue_cases &lt;- read_csv(\"data/aspatial/Dengue_Daily.csv\")\n\nExtracting all dengue cases in the year 2023 since we are specifically looking at dengue cases in 2023.\n\ndengue_cases$發病日 &lt;- as.Date(dengue_cases$發病日, format=\"%Y/%m/%d\")\n\n# Filter the data frame for rows where the year is 2023\ndengue_cases_2023 &lt;- dengue_cases[format(dengue_cases$發病日, \"%Y\") == \"2023\", ]\n\nSince we are supposed to filter all cases between epidemological weeks 31 and 50, we are using dplyr mutate to add a column ’number_of_weeks” which indicates the week the epidemological week at any given point in time in 2023\n\ndengue_cases_2023_by_week &lt;- dengue_cases_2023 %&gt;% \n  mutate(number_of_weeks = isoweek(發病日))\n\nZooming-in and filtering the dengue cases that were onset between Weeks 31 and 50 during the year 2023\n\ndengue_cases_weeks_31_to_50 &lt;- dengue_cases_2023_by_week %&gt;%\n  filter(number_of_weeks &gt;= 31 & number_of_weeks &lt;= 50)\n\nSince we only require the onset date, x and y coordinates of the location where the case was reported, we would be filtering those fields out specifically\n\nfiltered_dengue_cases_coords &lt;- dengue_cases_weeks_31_to_50 %&gt;% \n  dplyr::select(發病日, 最小統計區中心點X, 最小統計區中心點Y, number_of_weeks)\n\nRemoving all null values which do not have coordinates i.e. X coordinate / Y coordinate is denoted as ‘None’\n\nfiltered_dengue_cases_coords &lt;- filtered_dengue_cases_coords %&gt;%\n  filter(最小統計區中心點X != 'None', 最小統計區中心點Y != 'None')\n\nNext, we are converting the aspatial data of dengue cases to an sf_object to be able to plot these values on our TAINAN VILLAGE shapefile. The coordinates of where the case was onset would allow us to gauge which village in Tainan the case was from such that the coordinates of the dengue case onset would be plotted inside the corresponding polygon of the village.\n\nfiltered_dengue_cases_coords_sf &lt;- st_as_sf(filtered_dengue_cases_coords, coords = c(\"最小統計區中心點X\", \"最小統計區中心點Y\"), crs = 4326)\n\nConfirming that our aspatial data is following the correct Coordinate Reference System i.e. WGS84. This would enable us to ensure that both our geospatial and aspatial data are using the same coordinate reference system and thus are compatible with each other.\n\ncrs_info2 &lt;- st_crs(filtered_dengue_cases_coords_sf)\nprint(crs_info2[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\n\n\nJoining aspatial and geospatial data to create a single object\nWe would now be filtering all our dengue cases confining them to our study area i.e. within TAINAN_VILLAGE.shp / our region of study\n\ntaiwan_dengue_cases_filtered &lt;- st_join(filtered_regions_mpsz, filtered_dengue_cases_coords_sf, left = TRUE)\n\ntaiwan_dengue_cases_filtered &lt;- taiwan_dengue_cases_filtered %&gt;%\n  dplyr::select(VILLCODE, VILLNAME, VILLENG, TOWNID, 發病日, number_of_weeks, geometry)\n\nTo ensure that we have correctly filtered all points, we would be plotting the onset of dengue cases on the map of our study area. Ideally, all points should fall within the blue region which ensures that all points are confined within our study area.\n\ntmap_mode(\"plot\")\n\ntm_shape(filtered_regions_mpsz) + \n  tm_polygons(col = \"lightblue\", border.col = \"gray\") +  # Plot the regions\ntm_shape(taiwan_dengue_cases_filtered) +\n  tm_dots(col = \"red\", size = 0.1) +\ntm_layout(main.title = \"Dengue Cases in Study Area (Tainan)\")\n\n\n\n\nRemoving all points where the number of weeks as this may hinder our analysis.\n\ntaiwan_dengue_cases_filtered &lt;- taiwan_dengue_cases_filtered %&gt;%\n  filter(!is.na(number_of_weeks))\n\nNext, we would be aggregating the dengue cases in our study area by each village and each epidemiological week to gauge the increase / decrease of Dengue cases over the period of 20 weeks. These would further allow us to check for dengue clusters, hot spots, cold spots as well as emerging / recurring hotspots over a period of time.\n\naggregated_dengue_cases &lt;- taiwan_dengue_cases_filtered %&gt;%\n  group_by(VILLCODE, VILLNAME, VILLENG, number_of_weeks) %&gt;%\n  summarise(CASE_COUNT = n(), .groups = 'drop')\n\nTo create our spacetime cube, we need to ensure that each village has a corresponding number of cases for each week, in the absence of this data, we may not be able to form a space-time cube for which we would have to complete our data.\nEssentially, we have to fill all villages which did not have cases for the week with 0 to ensure the completeness of our data. We would first be finding all values which are missing and eventually replace the value with zero.\nComputing all possible combinations to account for villages that did not have any cases in a particular week (20 weeks x 257 villages)\n\nvillages &lt;- aggregated_dengue_cases %&gt;%\n  distinct(VILLCODE, VILLNAME, VILLENG, geometry)\n\nweeks &lt;- 31:50\n\nall_combinations &lt;- crossing(weeks, villages) %&gt;%\n  rename(number_of_weeks = weeks)\n\nWe would be left-joining this data with our current aggregated data to find all those values\n\njoined_data &lt;- left_join(all_combinations, aggregated_dengue_cases, \n                         by = c(\"VILLCODE\", \"VILLNAME\", \"VILLENG\", \"number_of_weeks\", \"geometry\"))\n\nReplacing the case count in villages which had no cases onset during a particular week with zero to indicate that zero cases for the week were onset for that particular village\n\njoined_data &lt;- joined_data %&gt;%\n  mutate(CASE_COUNT = if_else(is.na(CASE_COUNT), 0, CASE_COUNT))\n\nSince a spacetime cube needs to be able to model emerging cases against time. To enable this, we need the end date for each week which could be used as a measure of time. Consequently, an end date column which marks the end of the week to gauge the number of cases onset each week is added.\n\nbase_date &lt;- as.Date(\"2023-01-02\")\n\njoined_data &lt;- joined_data %&gt;%\n  mutate(week_end_date = base_date + (number_of_weeks * 7) - 1)\n\nAggregating the cases onset in every village per week\n\naggregated_dengue_cases_summary &lt;- joined_data %&gt;%\n  group_by(VILLCODE, VILLNAME, VILLENG, number_of_weeks, week_end_date, geometry) %&gt;%\n  summarise(total_cases = sum(CASE_COUNT, na.rm = TRUE), .groups = 'drop')\n\nWe would now be arranging the dengue cases onset in ascending order by time\n\naggregated_dengue_cases_summary$week_end_date &lt;- as.Date(aggregated_dengue_cases_summary$week_end_date)\n\naggregated_dengue_cases_summary &lt;- aggregated_dengue_cases_summary %&gt;%\n  arrange(week_end_date)\n\n\naggregated_dengue_cases_summary &lt;- st_as_sf(aggregated_dengue_cases_summary)\n\n\n\nCreating the space-time cube layer\nWe would finally be converting our dataframe of aggregated dengue cases by each week and village to create a three dimensional structure i.e. a spacetime cube (Used for Emerging Hotspot Analysis later) which plots the total cases onset vs the village (Geometry) vs the epidemiological week (Time)\n\ndengue_cases_stcube &lt;- as_spacetime(aggregated_dengue_cases_summary, .loc_col = \"VILLCODE\", .time_col = \"week_end_date\")\n\nVerifying if the conversion to a spacetime object was successful. If that’s the case than the value returned by the code chunk should be both is_spacetime() and is_spacetime_cube() should be ‘True’\n\nis_spacetime(dengue_cases_stcube)\n\n[1] TRUE\n\nis_spacetime_cube(dengue_cases_stcube)\n\n[1] TRUE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-global-and-local-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-global-and-local-measures-of-spatial-autocorrelation",
    "title": "Take-home_Ex02",
    "section": "Computing Global and Local Measures of Spatial Autocorrelation",
    "text": "Computing Global and Local Measures of Spatial Autocorrelation\n\nGlobal measures of Spatial Association\nWe would first be computing the spatial weights of our study area using a Queen contiguity weight matrix.\n\nwm_q &lt;- aggregated_dengue_cases_summary %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\nwm_q\n\nSimple feature collection with 5140 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  WGS 84\n# A tibble: 5,140 × 9\n   nb          wt     VILLCODE    VILLNAME VILLENG number_of_weeks week_end_date\n * &lt;nb&gt;        &lt;list&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;             &lt;dbl&gt; &lt;date&gt;       \n 1 &lt;int [199]&gt; &lt;dbl&gt;  67000270001 太子里   Taizi …              31 2023-08-06   \n 2 &lt;int [79]&gt;  &lt;dbl&gt;  67000270002 土庫里   Tuku V…              31 2023-08-06   \n 3 &lt;int [119]&gt; &lt;dbl&gt;  67000270003 一甲里   Yijia …              31 2023-08-06   \n 4 &lt;int [259]&gt; &lt;dbl&gt;  67000270004 仁德里   Rende …              31 2023-08-06   \n 5 &lt;int [79]&gt;  &lt;dbl&gt;  67000270005 仁義里   Renyi …              31 2023-08-06   \n 6 &lt;int [99]&gt;  &lt;dbl&gt;  67000270006 新田里   Xintia…              31 2023-08-06   \n 7 &lt;int [119]&gt; &lt;dbl&gt;  67000270007 後壁里   Houbi …              31 2023-08-06   \n 8 &lt;int [119]&gt; &lt;dbl&gt;  67000270008 上崙里   Shangl…              31 2023-08-06   \n 9 &lt;int [119]&gt; &lt;dbl&gt;  67000270011 保安里   Bao'an…              31 2023-08-06   \n10 &lt;int [299]&gt; &lt;dbl&gt;  67000270012 成功里   Chengg…              31 2023-08-06   \n# ℹ 5,130 more rows\n# ℹ 2 more variables: geometry &lt;POLYGON [°]&gt;, total_cases &lt;dbl&gt;\n\n\nConducting the Global Moran I test to check the degree of spatial autocorrelation across our study area which would allow us to check the possible prevalence of potential clusters.\n\nmoranI &lt;- global_moran(wm_q$total_cases,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\nList of 2\n $ I: num 0.15\n $ K: num 17.1\n\n\nThe i value for now appears to be 0.15 which indicates there appears to be a rather low but positive autocorrelation. This could indicate that there may be clustering in our data.\nConducting a monte-carlo simulation using Global moran permutation test to find the p value of our dataset. 1000 simulations would be conducted.\n\nset.seed(1234)\nglobal_moran_perm(wm_q$total_cases,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 999)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.14972, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nResults of the Monte Carlo Simulation: Our p-value is 2.2e - 16 which is well below the significance level of 0.05. With this, we would reject the null hypothesis at a 99% confidence level that dengue cases are distributed at random.\nNevertheless, it is imperative that clusters are present at certain areas in our study area which we would be looking at in detail using Local meaures of Spatial Autocorrelation.\n\n\nLocal measures of Spatial Association (Village Level)\nNext, we would be finding the local moran I value at the village level to do a village-level analyses (finding clusters of dengue) by conducting 100 simulations on our data for each village.\n\nlisa_study_area &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    total_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nsummary(lisa_study_area$ii)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.65337 -0.02873  0.04479  0.14972  0.22983  8.60789 \n\n\nWe would now be visualising the local Moran I values for all villages of our study area on a map (LEFT).\nThe local Moran I values would be evaluated in conjunction with the repsective p-values for each village to ensure that our findings are statistically significant (RIGHT) to better gauge the strength of spatial patterns.\nConsequently, Both maps in tandem with each other would be used to identify clusters of dengue cases in the defined study area.\n\ntmap_mode(\"plot\")\n\nmap_local_moran_i &lt;- tm_shape(lisa_study_area) +\n  tm_polygons(\"ii\", \n              title = \"Local Moran's I\",\n              palette = \"-RdYlGn\", \n              style = \"quantile\", \n              n = 5) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran's I of Total Cases in Study Area\",\n            main.title.size = 0.8)\n\nmap_pvalue_local_moran &lt;- tm_shape(lisa_study_area) +\n  tm_polygons(\"p_ii\",\n              title = \"p-value\",\n              palette = \"-YlOrRd\", \n              breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"&lt; 0.001\", \"0.001-0.01\", \"0.01-0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Local Moran's I (Study Area)\",\n            main.title.size = 0.8)\n\n\ntmap_arrange(map_local_moran_i, map_pvalue_local_moran, ncol = 2)\n\n\n\n\nNow, we would be identifying dengue clusters within our study area. We would categorically filter statistically significant areas i.e. p value &lt; 0.05. It’s crucial to note that areas with a High-Low mean or Low-High mean would be considered outliers whilst areas having a Low-Low mean or High-High mean would be considered Dengue clusters in our study area.\n\nlisa_statistically_significant &lt;- lisa_study_area %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\n\ntm_shape(lisa_study_area) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  \ntm_shape(lisa_study_area) +\n  tm_fill(col = \"mean\") + \n  tm_borders(alpha = 0.4) +\n  \ntm_layout(\n  main.title = \"Dengue Clusters in Study Area\",\n  main.title.size = 1.0\n) +\n  \ntm_compass(type = \"4star\", position = c(\"left\", \"top\"))\n\n\n\n\nIt appears that outside the central area of our map, there are significant dengue clusters. Nevertheless, it is imperative that there is a presence of dengue clusters in the outer areas of our study area i.e. the green areas such that they they have high values of dengue cases and our surrounded by other areas with significantly high dengue cases too."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conducting-hotspot-and-coldspot-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conducting-hotspot-and-coldspot-analysis",
    "title": "Take-home_Ex02",
    "section": "Conducting Hotspot and Coldspot Analysis",
    "text": "Conducting Hotspot and Coldspot Analysis\nWe could further dive deeper by checking for areas that happen to have a higher concentration (Hotspot) or lower concentration (Coldspot) of dengue cases relative to its surroundings\nWe would first be computing the spatial weights of our study area using an Inverse-Distance-Weight matrix.\n\nwm_idw &lt;- aggregated_dengue_cases_summary %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\nSubsequently, we would be finding the local Gi statistics at the village level to do a village-level analyses (finding dengue hotspots and coldspots) by conducting 100 simulations on our data for each village.\n\nHCSA_dengue_cases &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    aggregated_dengue_cases_summary$total_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA_dengue_cases\n\nSimple feature collection with 5140 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  WGS 84\n# A tibble: 5,140 × 17\n   gi_star    e_gi   var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  -2.41  1.93e-4 4.08e-10 -2.35   1.89e-2         0.04     0.02  5.99e-1 &lt;int&gt;\n 2  -2.79  1.96e-4 9.11e-10 -3.03   2.42e-3         0.02     0.01 -5.95e-2 &lt;int&gt;\n 3  -0.318 1.95e-4 7.86e-10 -0.306  7.60e-1         0.88     0.44  6.66e-1 &lt;int&gt;\n 4   2.45  1.97e-4 3.78e-10  2.10   3.58e-2         0.04     0.02  1.21e-1 &lt;int&gt;\n 5   0.604 1.91e-4 8.62e-10  0.802  4.23e-1         0.48     0.24  3.45e-1 &lt;int&gt;\n 6  -0.217 1.89e-4 9.86e-10 -0.0113 9.91e-1         1        0.5   2.89e-1 &lt;int&gt;\n 7  -3.00  1.90e-4 5.88e-10 -3.08   2.09e-3         0.02     0.01 -8.54e-4 &lt;int&gt;\n 8  -5.27  1.92e-4 7.56e-10 -4.96   7.04e-7         0.02     0.01  3.15e-1 &lt;int&gt;\n 9  -4.93  1.99e-4 7.41e-10 -4.93   8.42e-7         0.02     0.01  1.80e-1 &lt;int&gt;\n10  -5.72  1.94e-4 3.26e-10 -5.16   2.46e-7         0.02     0.01  2.45e-1 &lt;int&gt;\n# ℹ 5,130 more rows\n# ℹ 8 more variables: wts &lt;list&gt;, VILLCODE &lt;chr&gt;, VILLNAME &lt;chr&gt;,\n#   VILLENG &lt;chr&gt;, number_of_weeks &lt;dbl&gt;, week_end_date &lt;date&gt;,\n#   geometry &lt;POLYGON [°]&gt;, total_cases &lt;dbl&gt;\n\n\n\nsummary(HCSA_dengue_cases$gi_star)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-7.7244 -3.0531 -0.1416  0.2046  2.8584 12.2829 \n\n\nWe would now be visualising the Gi values for all villages of our study area on a map (LEFT).\nThe Gi values would be evaluated in conjunction with the repsective p-values for each village to ensure that our findings are statistically significant (RIGHT) to better gauge the strength of our hotspots and coldspots\nNevertheless, Both maps in tandem with each other would be used to identify clusters of dengue cases in the defined study area (Statistically significant values).\nBoth maps in tandem with each other would be used to identify hot spots and cold spots of dengue cases in the defined study area.\n\ntmap_mode(\"plot\")\n\nmap_gi_values &lt;- tm_shape(HCSA_dengue_cases) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of Dengue Cases in Study Area\",\n            main.title.size = 0.8)\n\nmap_pvalue_HSCA &lt;- tm_shape(HCSA_dengue_cases) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"&lt; 0.001\", \"0.001-0.01\", \"0.01-0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  \n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map_gi_values, map_pvalue_HSCA, ncol = 2)\n\n\n\n\nHot-spots and cold-spots from the dataset would be identified. Areas with a significantly high Gi star values(i.e. above 5) would be considered hotspots whereas areas having a Low GI star value (i.e. below -5) would be considered cold-spots in the study area. We would also categorically filter for statistically significant areas i.e. p value &lt; 0.05\n\nHCSA_statistically_significant &lt;- HCSA_dengue_cases %&gt;%\n  filter(p_sim &lt; 0.05)\n\n\ntmap_mode(\"plot\")\nmap &lt;- tm_shape(HCSA_dengue_cases) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  tm_shape(HCSA_statistically_significant) + \n  tm_fill(col = \"gi_star\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(\n    main.title = \"Hot-Spots and Cold-Spots in Study Area\",\n    main.title.size = 1.0\n  ) +\n  tm_compass(type = \"4star\", position = c(\"left\", \"top\"))\n\nmap\n\n\n\n\nBased on the data it is imperative that there are four coldspots (denoted in orange) having a gi star value below -5 and there are five hotspots (Denoted in Green) having a gi star value above 5 (or even 10).\nIt appears that areas that the cold-spots (distant from the central part of our study area) have a lower spread of dengue cases relative to its neighbours whilst areas closer to the centre tend to be hotspots indicating that the outbreak of Dengue is more prevalent in the central part of our study area (Concentration of Dengue cases is higher compared to its neighbours."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conducting-an-emerging-hotspot-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conducting-an-emerging-hotspot-analysis",
    "title": "Take-home_Ex02",
    "section": "Conducting an Emerging Hotspot Analysis",
    "text": "Conducting an Emerging Hotspot Analysis\nPerforming an emerging hotspot analysis gauging the spread of dengue in all villages over a period of time.\nWe would begin by finding all neighbours and derive inversely-weighted distances amongst neighbouring villages\n\ndengue_cases_nb &lt;- dengue_cases_stcube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nNext we would be calculating the local Gi* for each region to gauge the concentration of dengue cases in a region relative to neighbouring regions around our region.\n\ngi_stars &lt;- dengue_cases_nb %&gt;%\n  group_by(number_of_weeks) %&gt;%\n  mutate(gi_star = local_gstar_perm(total_cases, nb, wt)) %&gt;%\n  ungroup() %&gt;%\n  tidyr::unnest(cols = c(gi_star))\n\n\nMann Kendall’s Test (One village)\nWe would be using Mann Kendall Test to evaluate the trends of dengue cases in a village over a period of time. We would first be conducing Mann Kendall’s test for one village followed by the entire dataset.\n\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(VILLENG == \"Renyi Vil.\") |&gt; \n  select(VILLENG, number_of_weeks, total_cases, gi_star)\n\nNow, we would Visualise the gi star values over the 20 epidemiological week period. The plot for Renyi village indicates that there was a peak in the later weeks around week 46 when the village had a higher concentration of Dengue cases compared to neighbouring areas indicating that RenYi village in fact became a hotspot at a later point in time.\n\nGI_star_plot &lt;- ggplot(data = cbg, \n       aes(x = number_of_weeks, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(GI_star_plot)\n\n\n\n\n\n\n\nMann Kendall’s Test (Whole Study Area)\nNow, we would be performing an emerging hotspot analyses on all villages in our study area using Mann Kendall’s test\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(VILLCODE, VILLNAME, VILLENG) %&gt;%\n  summarise(mk = list(\n    unclass(Kendall::MannKendall(gi_star))\n  ), .groups = 'drop') %&gt;%  \n  tidyr::unnest_wider(mk)\n\nWe would be checking for the five most major growing hotspots by slicing the top 5 emerging hotspots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\n\nPrinting the name of the top 5 emerging hotspots\n\nprint(emerging$VILLENG)\n\n[1] \"Fuqian Vil.\"   \"Chongxin Vil.\" \"Wuwang Vil.\"   \"Chongxue Vil.\"\n[5] \"Chongde Vil.\" \n\n\nConducting an emerging hotspot analyses on the spacetime cube using 100 simulations to gauge which villages became emerging hotspots over a period of time due to the increasing spread of dengue across our study area.\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = dengue_cases_stcube, \n  .var = \"total_cases\", \n  k = 1, \n  nsim = 99\n)\n\nWe would also be visualising the distribution of different EHSA classes and our findings indicate that we have had a number of oscillating hotspots such that\n\nggplot(data = ehsa, aes(x = classification)) +\n  geom_bar() +\n  ggtitle(\"Frequency of Emerging Hotspot Analysis: Categories\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nThe fact that most of our hotspots and coldspots are oscillating hotspots / coldspots implies that our hotspots and coldspots are not fixed, this means that the intensity of dengue cases in any given village changes over a period of time alongside its adjacent neighbours further solidifying the fact that Gi star values are in fact spatio-temoral dependent.\nNext, we would be visualising the emerging hot-spot analysis for different villages in the study area\n\ntaiwan_ehsa &lt;- aggregated_dengue_cases_summary %&gt;%\n  left_join(ehsa,\n            by = join_by(VILLCODE == location))\n\nWe would also plot the different categories of emerging hotspots over a time period of 20 epidemiological weeks on a map.\nThe local Gi* values would be evaluated in conjunction with the repsective p-values for each village to ensure that our findings are statistically significant to better gauge the strength of spatial patterns.\nConsequently, we would categorically filter statistically significant areas i.e. p value &lt; 0.05\n\nehsa_statistically_significant &lt;- taiwan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(taiwan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_statistically_significant) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nBased on the results, it appears that there were a number of villages in Central and North-east of our study area over the period of 20 epidemiological weeks that were oscillating hotspots and coldspots implying that the intensity of dengue cases in those areas alongside neighbours varied with time."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415 - GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications I am taking this term.\nThis is the course website for IS415 I study this term. You will find my coursework on this website"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "Installing relevant R packages\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\nImporting the Hunan shapefile\n\nhunan &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting the CSV file into R\n\nhunan2012 &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/aspatial/Hunan_2012.csv\")\n\nReading layer `Hunan_2012' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\aspatial\\Hunan_2012.csv' \n  using driver `CSV'\n\n\nLeft-joining the Geospatial Hunan spatial polygon with the aspatial Hunan2012 csv file\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n#font size\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\nCompute Queen Contiguity-based neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nRetrieving the coordinates: Binding the longitudes and latitudes into a single object\n\ncoords &lt;- cbind(longitude, latitude)\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nhunan_sp &lt;- hunan%&gt;%\n  as_Spatial()\n\n\n#gwstat &lt;- gwss(coords = hunan_sp, \n               #vars = \"GDPPC\",\n               #bw = 6,\n               #kernel = \"bisquare\",\n               #adaptive = TRUE,\n               #longlat = T)"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex03/In-class_Ex03-NKDE.html",
    "href": "In-class_Ex/In-Class_Ex03/In-class_Ex03-NKDE.html",
    "title": "In-class_Ex03-NKDE",
    "section": "",
    "text": "install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\91770\\AppData\\Local\\Temp\\RtmpwH4XnF\\downloaded_packages\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse)\n\n\nnetwork &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex03/data/data/geospatial\", layer = \"Punggol_St\") \n\nReading layer `Punggol_St' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\nchildcare &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex03/data/data/geospatial\", layer = \"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_mode('view')\ntm_shape(childcare) + tm_dots() + tm_shape(network) + tm_lines()\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Installing relevant R packages\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\nImporting the Hunan shapefile\n\nhunan &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting the CSV file into R\n\nhunan2012 &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/aspatial/Hunan_2012.csv\")\n\nReading layer `Hunan_2012' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\aspatial\\Hunan_2012.csv' \n  using driver `CSV'\n\n\nLeft-joining the Geospatial Hunan spatial polygon with the aspatial Hunan2012 csv file\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nMap on the left: Preparing BaseMap of Hunan depicting different sub-regions Map on the right: Displaying GDP per Capita in the different sub-regions of Hunan\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n#font size\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\nCompute Queen Contiguity-based neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFinding neighbours of the very first polygon / province\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nRetrieving a county’s name using its polygon ID\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nOne could find the names of all neighbouring polygons using their polygon IDs\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nFinding the GDP per capita of all 5 neighbours\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] \"20981\" \"34592\" \"24473\" \"21311\" \"22879\"\n\n\nView complete weight matrix using str()\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nCompute a rook-based contiguity matrix\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nVisualising contiguous weights\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nRetrieving the coordinates: Binding the longitudes and lattitudes into a single object\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlotting both queen and rook contiguity based neighbours on a map\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")\n\n\n\n\nComputing neighbours based on distance\nDetermining the cut-off distance\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nKnowing that the largest distance to a first neighbour is 61.79km, Using a threshold of 62km would ensure that all neighbouring regions would be covered further giving a degree of cerrtainty that all sub-regions have atleast 1 neighbour\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nDisplaying the structure of the weight matrix by combining table and card\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlotting a distance-weight matrix (red lines = 1st nearest neighbours, black lines = Distance link)\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\nIncreasing average number of neighbours\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nNow, each county has exactly 6 neighbours (Nothing less, nothing more)\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nRe-adjusted weightage map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\nDeriving a spatial weight matrix using IDW (Inverse Distance Method)\nComputing the distances between different areas\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nAssigning weights to each row of the polygon\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n#rswm_ids$weights[1]\n\nView the weights of the first polygon’s eight neighbours (Queen)\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive row-standardised weight matrix\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on_Ex01: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tidyverse)\n\n\n\n\n\nmpsz &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\n\nplot(mpsz)\n\n\n\n\nWORK IN PROGRESS"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "title": "Hands-on_Ex01: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-relevant-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-relevant-geospatial-data-in-shapefile-format",
    "title": "Hands-on_Ex01: Geospatial Data Wrangling with R",
    "section": "",
    "text": "mpsz &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on_Ex01: Geospatial Data Wrangling with R",
    "section": "",
    "text": "plot(mpsz)\n\n\n\n\nWORK IN PROGRESS"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02:Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "Loading relevant packages\n\npacman::p_load(sf, tmap, tidyverse)\n\nImporting relevant map data\n\nmpsz &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO           SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N\n1         1          2       PEOPLE'S PARK    OTSZ02      Y        OUTRAM\n2         2          2         BUKIT MERAH    BMSZ02      N   BUKIT MERAH\n3         3          3           CHINATOWN    OTSZ03      Y        OUTRAM\n4         4          4             PHILLIP    DTSZ04      Y DOWNTOWN CORE\n5         5          5       RAFFLES PLACE    DTSZ05      Y DOWNTOWN CORE\n6         6          4        CHINA SQUARE    OTSZ04      Y        OUTRAM\n7         7         10         TIONG BAHRU    BMSZ10      N   BUKIT MERAH\n8         8         12    BAYFRONT SUBZONE    DTSZ12      Y DOWNTOWN CORE\n9         9          4 TIONG BAHRU STATION    BMSZ04      N   BUKIT MERAH\n10       10          6       CLIFFORD PIER    DTSZ06      Y DOWNTOWN CORE\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          OT CENTRAL REGION       CR B4120D23006C932A 2016-05-11 28831.78\n2          BM CENTRAL REGION       CR 1C51019439A68700 2016-05-11 26360.80\n3          OT CENTRAL REGION       CR 0FF1661344C84AED 2016-05-11 29153.97\n4          DT CENTRAL REGION       CR 615D4EDDEF809F8E 2016-05-11 29706.72\n5          DT CENTRAL REGION       CR 72107B11807074F4 2016-05-11 29968.62\n6          OT CENTRAL REGION       CR B609DF5587626C8F 2016-05-11 29509.64\n7          BM CENTRAL REGION       CR A0FB4B68155D164A 2016-05-11 27785.67\n8          DT CENTRAL REGION       CR 197F5E664DA4D5E1 2016-05-11 30806.24\n9          BM CENTRAL REGION       CR 91FFE927ABE3E4DB 2016-05-11 27277.47\n10         DT CENTRAL REGION       CR 945CC212CA80626F 2016-05-11 30379.50\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29419.65  1822.1927   93140.44 MULTIPOLYGON (((29099.02 29...\n2  29384.14  3074.9632  411722.82 MULTIPOLYGON (((26750.09 29...\n3  29158.04  4297.5999  587222.68 MULTIPOLYGON (((29161.2 297...\n4  29744.91   871.5549   39437.94 MULTIPOLYGON (((29814.11 29...\n5  29572.76  1872.7522  188767.49 MULTIPOLYGON (((30137.77 29...\n6  29646.45  1605.2797  133006.94 MULTIPOLYGON (((29699.44 29...\n7  29590.40  3303.2149  448127.58 MULTIPOLYGON (((27748.04 29...\n8  29530.17  2897.1264  521200.52 MULTIPOLYGON (((30844.87 29...\n9  29607.02  2506.6879  350787.56 MULTIPOLYGON (((27444.04 29...\n10 29776.43  2405.9909  261843.90 MULTIPOLYGON (((30436.73 29...\n\n\nReading Census Data (2020)\n\npopdata &lt;- read_csv(\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv\")\n\nPerforming data transformation on census data\n\nfinal_result &lt;- popdata %&gt;%\n  filter(across(any_of(c(\"Time\")), ~. == 2020)) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(POP = sum(Pop)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12]),\n         `ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15]),\n         `AGED` = rowSums(.[16:21]),\n         `TOTAL` = rowSums(.[3:21]),\n         `DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %&gt;%\n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)\n\nJoining attribute data with Geospatial data\n\npopdata2020 &lt;- final_result %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLeft join map with aspatial data\n\n# Specify the directory path\ndirectory_path &lt;- \"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex02/data/rds/\"\n\nif (!dir.exists(directory_path)) {\n  dir.create(directory_path, recursive = TRUE)\n}\n\nwrite_rds(mpsz_pop2020, file.path(directory_path, \"mpszpop2020.rds\"))\n\nPlotting a choropleth map (Quick) using tmap\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nPlotting a detailed choropleth map using tmap elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.5, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nDrawing a map (Practice)\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\", n = 5, style = \"equal\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nFinding statistical summary (Quartiles) to accurately plot map\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",n = 6,style = \"quantile\", palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"4star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nPlotting individual choropleth maps for five regions of Singapore depicting the dependency ratio in each neighbourhood.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-Class_Ex02/In-class_Ex02.html",
    "title": "R for Geospatial Data Science",
    "section": "",
    "text": "Installing relevant r packages\n\npacman::p_load(arrow, lubridate, tidyverse, sf, tmap)\n\nImporting GrabPosisi data\n\ngrabdata &lt;- read_parquet(\"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex02/data/GrabPosisi/part-00000.parquet\")\n\n\ngrabdata$pingtimestamp &lt;- as_datetime(grabdata$pingtimestamp)\n\nExtract trip start time\n\norigin_df &lt;- grabdata %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number() == 1) %&gt;%\n  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), \n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\nExtract destination location\n\ndestination_df &lt;- grabdata %&gt;%\n  group_by(trj_id) %&gt;%\n  mutate(max_row = n()) %&gt;%\n  arrange(desc(pingtimestamp)) %&gt;%\n  filter(row_number() == max_row) %&gt;%\n  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), \n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp))) %&gt;%\n  select(-max_row)\n\nWriting the data from origin and destintion dataframes into respective RDS file\n\ndirectory_path &lt;- \"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex02/data/rds/\"\n\nif (!dir.exists(directory_path)) {\n  dir.create(directory_path, recursive = TRUE)\n}\n\nwrite_rds(origin_df, file.path(directory_path, \"origin_df.rds\"))\nwrite_rds(destination_df, file.path(directory_path, \"destination_df.rds\"))\n\nRead data from existing rds files\n\norigin_df &lt;- read_rds(\"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex02/data/rds/origin_df.rds\")\n\ndestination_df &lt;- read_rds(\"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex02/data/rds/destination_df.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-Class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\91770\\AppData\\Local\\Temp\\RtmpWipV8w\\downloaded_packages\n\npacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)\n\n\nmpsz &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-class_Ex/In-class_Ex03/data/data/geospatial\") \n\nMultiple layers are present in data source D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial, reading layer `CHILDCARE'.\nUse `st_layers' to list all layer names and their type in a data source.\nSet the `layer' argument in `st_read' to read a particular layer.\nReading layer `CHILDCARE' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1885 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11226.55 ymin: 25523.51 xmax: 44936.07 ymax: 49308.17\nProjected CRS: SVY21 / Singapore TM\n\n\n\nmpsz_sf &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-Class_Ex/In-Class_Ex03/data/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\" )\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nplot(mpsz_sf)\n\n\n\n\n\nchildcare_sf &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-Class_Ex/In-Class_Ex03/data/data/geospatial\", layer = \"Childcare\" )\n\nReading layer `Childcare' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1885 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11226.55 ymin: 25523.51 xmax: 44936.07 ymax: 49308.17\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare_sf &lt;- sf::st_read(dsn = \"D:/Kabeer2003/IS415 - GAA/In-Class_Ex/In-Class_Ex03/data/data/geospatial\", layer = \"Childcare\" )%&gt;% st_transform(crs = 3414)\n\nReading layer `Childcare' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\In-class_Ex\\In-Class_Ex03\\data\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1885 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11226.55 ymin: 25523.51 xmax: 44936.07 ymax: 49308.17\nProjected CRS: SVY21 / Singapore TM\n\n\n\nsg_sf &lt;- mpsz_sf %&gt;%\n  st_union()\nplot(sg_sf)\n\n\n\n\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1885 points\nAverage intensity 2.351049e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1885 character character \n\nWindow: rectangle = [11226.55, 44936.07] x [25523.51, 49308.17] units\n                    (33710 x 23780 units)\nWindow area = 801770000 square units\n\n\nRemove redundant duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, retry = TRUE, nsim = 1, drop = TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\nsg_owin &lt;- as.owin(sg_sf)\n#Confines study area, input to owin should always be an sf layer\n#as_ppp can convert data from sf to ppp likewise\n\n\nplot(sg_owin)\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1            14650  6.97996e+08      8.93e-01\npolygon 2 (hole)         3 -2.21090e+00     -2.83e-09\npolygon 3              285  1.61128e+06      2.06e-03\npolygon 4 (hole)         3 -2.05920e-03     -2.63e-12\npolygon 5 (hole)         3 -8.83647e-03     -1.13e-11\npolygon 6              668  5.40368e+07      6.91e-02\npolygon 7               44  2.26577e+03      2.90e-06\npolygon 8               27  1.50315e+04      1.92e-05\npolygon 9              711  1.28815e+07      1.65e-02\npolygon 10 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 11 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 12 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 13 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 14              77  3.29939e+05      4.22e-04\npolygon 15              30  2.80002e+04      3.58e-05\npolygon 16 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 17              71  8.18750e+03      1.05e-05\npolygon 18 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 19 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 20 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 21 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 22 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 23 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 24 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 25 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 26 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 27              91  1.49663e+04      1.91e-05\npolygon 28 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 29 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 32 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 33              40  1.38607e+04      1.77e-05\npolygon 34 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 35 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 36 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 37              45  2.51218e+03      3.21e-06\npolygon 38             142  3.22293e+03      4.12e-06\npolygon 39             148  3.10395e+03      3.97e-06\npolygon 40              75  1.73526e+04      2.22e-05\npolygon 41              83  5.28920e+03      6.76e-06\npolygon 42             211  4.70521e+05      6.02e-04\npolygon 43             106  3.04104e+03      3.89e-06\npolygon 44             266  1.50631e+06      1.93e-03\npolygon 45              71  5.63061e+03      7.20e-06\npolygon 46              10  1.99717e+02      2.55e-07\npolygon 47             478  2.06120e+06      2.64e-03\npolygon 48             155  2.67502e+05      3.42e-04\npolygon 49            1027  1.27782e+06      1.63e-03\npolygon 50 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 51              65  8.42861e+04      1.08e-04\npolygon 52              47  3.82087e+04      4.89e-05\npolygon 53               6  4.50259e+02      5.76e-07\npolygon 54             132  9.53357e+04      1.22e-04\npolygon 55 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 56               4  2.69313e+02      3.44e-07\npolygon 57 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 58            1045  4.44510e+06      5.68e-03\npolygon 59              22  6.74651e+03      8.63e-06\npolygon 60              64  3.43149e+04      4.39e-05\npolygon 61 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63              14  5.86546e+03      7.50e-06\npolygon 64              95  5.96187e+04      7.62e-05\npolygon 65 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 66 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 67 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 68 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 69             234  2.08755e+06      2.67e-03\npolygon 70              10  4.90942e+02      6.28e-07\npolygon 71             234  4.72886e+05      6.05e-04\npolygon 72 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 73              15  4.03300e+04      5.16e-05\npolygon 74             227  1.10308e+06      1.41e-03\npolygon 75              10  6.60195e+03      8.44e-06\npolygon 76              19  3.09221e+04      3.95e-05\npolygon 77             145  9.61782e+05      1.23e-03\npolygon 78              30  4.28933e+03      5.49e-06\npolygon 79              37  1.29481e+04      1.66e-05\npolygon 80               4  9.47108e+01      1.21e-07\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\n\nplot(pg)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05: Global and Local measures of Spatial Autocorrelation",
    "section": "",
    "text": "Installing relevant R packages\n\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr)\n\nImporting Geospatial Data\n\nhunan &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting Aspatial Data\n\nhunan2012 &lt;- st_read(dsn =\"D:/Kabeer2003/IS415 - GAA/Hands-on_Ex/Hands-on_Ex04/data/aspatial/Hunan_2012.csv\")\n\nReading layer `Hunan_2012' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\aspatial\\Hunan_2012.csv' \n  using driver `CSV'\n\n\nLeft-joining the Geospatial Hunan spatial polygon with the aspatial Hunan2012 csv file\n\n#Use alternate variables to retain spatial properties\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nPlotting the map\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan_GDPPC, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),  \n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n\nComputing Moran I\n\n#moranI &lt;- global_moran_test(wm_q$GDPPC, wm_q$nb, wm_q$wt, nsim = 99)\n\nGlobal Moran permutation test (Monte Carlo Simulation)\n\n#global_moran_perm(wm_q$GDPPC, wm_q, wm_q$nb, wm_q$wt, nsim = 99)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/data/geospatial/TAINAN_VILLAGE.html",
    "href": "Take-home_Ex/Take-home_Ex02/data/geospatial/TAINAN_VILLAGE.html",
    "title": "IS415 - GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“TWD97”,DATUM[“Taiwan Datum 1997”,ELLIPSOID[“GRS 1980”,6378137,298.257222101,LENGTHUNIT[“metre”,1]]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.”],BBOX[17.36,114.32,26.96,123.61]],ID[“EPSG”,3824]] +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs 27230 3824 EPSG:3824 TWD97 longlat EPSG:7019 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take_home_Ex03 test",
    "section": "",
    "text": "#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly, stringr, spatstat, maptools, raster)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#installing-relevant-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#installing-relevant-r-packages",
    "title": "Take_home_Ex03 test",
    "section": "",
    "text": "#|eval: False\npacman::p_load(sf, sp, spdep, sfdep, tmap, tidyverse, knitr, tibble, dplyr, lubridate, spacetime, stars, plotly, stringr, spatstat, maptools, raster)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-and-pre-processing-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-and-pre-processing-data",
    "title": "Take_home_Ex03 test",
    "section": "Importing and Pre-processing Data",
    "text": "Importing and Pre-processing Data\n\nImporting Geospatial Data\nImporting the shapefile MP14_SUBZONE_WEB_PL.shp\n\nsingapore_mpsz = st_read(\"data/geospatial/MP14_SUBZONE_WEB_PL.shp\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Kabeer2003\\IS415 - GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\MP14_SUBZONE_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nTransforming the Coordinate Reference System (CRS) from SVY21 to WGS84 to ensure that our aspatial and geospatial data are compatible with each other\n\ncrs_info1 &lt;- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"SVY21\"\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, crs = 4326)\n\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncrs_info1 &lt;- st_crs(singapore_mpsz)\nprint(crs_info1[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\n\n\nImporting Aspatial Data\nImporting the csv file ‘updated_hawker_centres.csv’ using the read_csv() method\n\nhawker_centres = read_csv(\"data/aspatial/updated_hawker_centres.csv\")\n\nImporting the csv file ‘updated_hawker_stalls.csv’ using the read_csv() method\n\nhawker_stalls = read_csv(\"data/aspatial/updated_hawker_stalls.csv\")\n\nFiltering out all values where the postal code is null in order to accurately map hawker centre stalls to the right hawker centres\n\nif(is.numeric(hawker_centres$`Postal Code`)) {\n  hawker_centres$`Postal Code` &lt;- as.character(hawker_centres$`Postal Code`)\n}\n\n# Convert the 'Postal Code' column in hawker_stalls to character if it's numeric\nif(is.numeric(hawker_stalls$`Postal Code`)) {\n  hawker_stalls$`Postal Code` &lt;- as.character(hawker_stalls$`Postal Code`)\n}\n\nLeft joining all hawker food stalls to hawker centres using their postal code.\nNOTE: Every hawker centre could be uniquely identified using a postal code and one hawker centre has multiple stalls in it\n\ncombined_data &lt;- left_join(hawker_centres, hawker_stalls, by = \"Postal Code\")\n\nFiltering out relevant fields for analysis from the dataset\n\nhawker_stalls_data_filtered &lt;- combined_data %&gt;%\n  dplyr::select(`Postal Code`, `Hawker Centres`, Longitude, Latitude, `Hawker Centre Stalls`)\n\nEliminating all hawkers which do not have a longitude and latitude (Attempting to remove all null values that could potentially hinder analysis)\n\nfiltered_hawker_stalls_data_clean &lt;- hawker_stalls_data_filtered[!is.na(hawker_stalls_data_filtered$Longitude) & !is.na(hawker_stalls_data_filtered$Latitude), ]\n\nConverting the joint data to a sf dataframe\n\nfiltered_hawker_stalls_data_sf &lt;- st_as_sf(filtered_hawker_stalls_data_clean, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n\nEnsuring that the data is the correct coordinate reference system i.e. WGS84\n\ncrs_info2 &lt;- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n\n$input\n[1] \"EPSG:4326\"\n\nfiltered_hawker_stalls_data_sf &lt;- st_transform(filtered_hawker_stalls_data_sf, crs = 4326)\n\ncrs_info2 &lt;- st_crs(filtered_hawker_stalls_data_sf)\nprint(crs_info2[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\nSince the two csv files for the aspatial data were derived from PDFs, further cleansing would be cleansed on the joint dataframe.\n\nfiltered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(!is.na(`Hawker Centre Stalls`))\n\nRemoving all fields where the attribute hawker centres contains the phrase ‘Back to’\n\nfiltered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(!grepl(\"Back to\", `Hawker Centre Stalls`))\n\nWe need to ensure that each hawker stall has a unit no. within the hawker centre. Consequently, we would be checking if the if the hawker centre stalls field contains the character ‘#’ indicating that a unit number is present\nReal World Context: Every stall in the hawker centre has a unit number indicating the location of the hawker within the food centre. It is usually in the format #01-XXX\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- filtered_hawker_stalls_data_sf %&gt;%\n  filter(grepl(\"#\", `Hawker Centre Stalls`))\n\nOnce again confirming that the coordinate reference system is WGS84 so that we could combine our aspatial data with our geospatial data i.e. the map.\n\ncrs_info3 &lt;- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n\n$input\n[1] \"EPSG:4326\"\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\n\ncrs_info3 &lt;- st_crs(complete_filtered_hawker_stalls_data_sf)\nprint(crs_info3[1])\n\n$input\n[1] \"EPSG:4326\"\n\n\nEnsuring that our data is valid\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, 4326)\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 4326)\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n\n\n\nJoining our Geospatial and Aspatial data together\nNow, we would be using st_join to combine our geospatial data with our aspatial data, it is imperative that every hawker centre belongs to a region and planning area and joining the data would ensure that the each hawker centre is mapped to the right region and planning area.\n\nhawkers_united = st_join(singapore_mpsz, complete_filtered_hawker_stalls_data_sf)\n\nFiltering out fields relevant for analysis.\n\nhawkers_by_region &lt;- hawkers_united %&gt;%\n  dplyr::select(`PLN_AREA_N`, `REGION_N`, `Postal Code`, `Hawker Centres`, `Hawker Centre Stalls`, geometry)\n\nNow removing all redundant areas which do not have hawker centres, by filtering this dataframes where the postal code is null, we would automatically remove areas which do not have hawker centres such as Marina South. Furthermore, we could be assured that every hawker centre belongs to a planning area.\n\nhawkers_all_regions &lt;- hawkers_by_region %&gt;%\n  filter(!is.na(`Postal Code`))\n\n\n\nVisualisation of all hawker centres on the Singapore Map\nPlotting all hawker centres on a map to check if data transformation was correct\n\ntmap_mode(\"plot\")\ntm_shape(singapore_mpsz) +\n  tm_polygons() + \ntm_shape(hawkers_all_regions) +\n  tm_dots(col = \"red\", size = 0.1)\n\n\n\n\n\n\nStoring object in a RDS file for future reference\nSaving this data to an rds file for future perusal\n\ndirectory_path &lt;- \"data\"\n\nif (!dir.exists(directory_path)) {\n  dir.create(directory_path, recursive = TRUE)\n}\n\nwrite_rds(hawkers_all_regions, file.path(directory_path, \"hawkers_all_regions.rds\"))\n\nTesting if we are able to read the rds successfully\n\ntest &lt;- read_rds(\"data/hawkers_all_regions.rds\")\n\nSince ppp and owin objects cannot be created in degrees i.e. WGS84, we would have to use a two-dimensional CRS that uses relative distances. Hence we would be converting the coordinate reference system of both our dataframe with all points and the map of Singapore to SVY21.\n\nsingapore_mpsz &lt;- st_transform(singapore_mpsz, 3414)\nsingapore_mpsz &lt;- st_make_valid(singapore_mpsz)\n\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_transform(complete_filtered_hawker_stalls_data_sf, 3414)\ncomplete_filtered_hawker_stalls_data_sf &lt;- st_make_valid(complete_filtered_hawker_stalls_data_sf)\n\nConverting both SF dataframes (Geospatial and Aspatial) to SP (Spatial format)\n\nhawker_centre_pts &lt;- as_Spatial(complete_filtered_hawker_stalls_data_sf) \nsingapore_mpsz1 &lt;- as_Spatial(singapore_mpsz)\n\n\n\nConverting hawker centre points and the Singapore map to SP\nThe map data would be converted to spatial polygons which represent the different sub-regions in Singapore whereas the hawker centre points would be converted to Spatial Points.\n\nhawker_centre_pts_sp &lt;- as(hawker_centre_pts, \"SpatialPoints\") \nsingapore_mpsz_sp &lt;- as(singapore_mpsz1, \"SpatialPolygons\")\n\n\n\nCreating owin object (Singapore Map)\nConverting the Singapore map sp object to an owin object\n\nsingapore_owin &lt;- as(singapore_mpsz_sp, \"owin\")\nplot(singapore_owin)\n\n\n\n\n\nsummary(singapore_owin)\n\nWindow: polygonal boundary\n386 separate polygons (20 holes)\n                   vertices         area relative.area\npolygon 1               156  1.63038e+06      2.09e-03\npolygon 2               303  5.59816e+05      7.16e-04\npolygon 3                47  1.60809e+05      2.06e-04\npolygon 4                47  5.95423e+05      7.61e-04\npolygon 5                48  3.87430e+05      4.95e-04\npolygon 6                59  1.03038e+06      1.32e-03\npolygon 7                83  5.51731e+05      7.06e-04\npolygon 8                70  2.90185e+05      3.71e-04\npolygon 9               217  1.08479e+06      1.39e-03\npolygon 10               42  6.31643e+05      8.08e-04\npolygon 11              226  1.82685e+06      2.34e-03\npolygon 12               52  2.93711e+05      3.76e-04\npolygon 13              256  1.84406e+06      2.36e-03\npolygon 14              164  3.92563e+05      5.02e-04\npolygon 15              238  5.06591e+05      6.48e-04\npolygon 16               22  6.74620e+03      8.63e-06\npolygon 17               47  3.82089e+04      4.89e-05\npolygon 18               65  8.42861e+04      1.08e-04\npolygon 19              469  2.06120e+06      2.64e-03\npolygon 20              264  1.50631e+06      1.93e-03\npolygon 21             1149  3.30122e+07      4.22e-02\npolygon 22 (hole)        23 -1.25692e+03     -1.61e-06\npolygon 23                4  9.47128e+01      1.21e-07\npolygon 24               37  1.29491e+04      1.66e-05\npolygon 25               30  4.28953e+03      5.49e-06\npolygon 26              145  9.61783e+05      1.23e-03\npolygon 27              227  1.10308e+06      1.41e-03\npolygon 28               19  3.09219e+04      3.95e-05\npolygon 29               10  6.60201e+03      8.44e-06\npolygon 30              234  2.08755e+06      2.67e-03\npolygon 31               15  4.03288e+04      5.16e-05\npolygon 32             1045  4.44510e+06      5.68e-03\npolygon 33 (hole)        13 -3.92141e+02     -5.01e-07\npolygon 34              233  4.72887e+05      6.05e-04\npolygon 35               14  5.86528e+03      7.50e-06\npolygon 36               10  4.90997e+02      6.28e-07\npolygon 37               94  5.96175e+04      7.62e-05\npolygon 38               59  3.43163e+04      4.39e-05\npolygon 39 (hole)         3 -7.68533e-02     -9.83e-11\npolygon 40                4  2.69408e+02      3.45e-07\npolygon 41             1026  1.27782e+06      1.63e-03\npolygon 42              132  9.53360e+04      1.22e-04\npolygon 43                6  4.50376e+02      5.76e-07\npolygon 44              155  2.67503e+05      3.42e-04\npolygon 45              211  4.70522e+05      6.02e-04\npolygon 46              106  3.04131e+03      3.89e-06\npolygon 47               83  5.28926e+03      6.76e-06\npolygon 48             1462  4.87083e+06      6.23e-03\npolygon 49 (hole)        11 -8.36614e+01     -1.07e-07\npolygon 50               75  1.73525e+04      2.22e-05\npolygon 51              147  3.10396e+03      3.97e-06\npolygon 52              138  3.22285e+03      4.12e-06\npolygon 53               45  2.51228e+03      3.21e-06\npolygon 54               40  1.38603e+04      1.77e-05\npolygon 55              426  3.44964e+06      4.41e-03\npolygon 56               83  1.03237e+05      1.32e-04\npolygon 57              104  1.12730e+06      1.44e-03\npolygon 58              759  2.70301e+06      3.46e-03\npolygon 59 (hole)        28 -1.99840e+01     -2.56e-08\npolygon 60 (hole)        48 -1.38327e+02     -1.77e-07\npolygon 61 (hole)        20 -4.37607e+00     -5.60e-09\npolygon 62 (hole)       351 -1.21346e+03     -1.55e-06\npolygon 63               53  2.76828e+05      3.54e-04\npolygon 64              114  6.36655e+04      8.14e-05\npolygon 65               83  1.96620e+05      2.51e-04\npolygon 66               33  3.65334e+05      4.67e-04\npolygon 67              106  1.45483e+06      1.86e-03\npolygon 68              133  8.53203e+05      1.09e-03\npolygon 69              196  1.07072e+06      1.37e-03\npolygon 70               47  5.33016e+05      6.82e-04\npolygon 71               82  4.42501e+05      5.66e-04\npolygon 72              221  9.31409e+04      1.19e-04\npolygon 73               37  4.11723e+05      5.27e-04\npolygon 74              227  5.87221e+05      7.51e-04\npolygon 75               35  3.94370e+04      5.04e-05\npolygon 76               96  1.88768e+05      2.41e-04\npolygon 77               59  1.33007e+05      1.70e-04\npolygon 78               46  4.48128e+05      5.73e-04\npolygon 79               31  5.21199e+05      6.67e-04\npolygon 80               17  3.50788e+05      4.49e-04\npolygon 81               54  2.61841e+05      3.35e-04\npolygon 82              239  1.59034e+06      2.03e-03\npolygon 83              298  8.86957e+05      1.13e-03\npolygon 84              190  2.23207e+05      2.85e-04\npolygon 85              142  2.00053e+05      2.56e-04\npolygon 86              169  7.10568e+05      9.09e-04\npolygon 87               34  7.48683e+05      9.57e-04\npolygon 88              192  5.91779e+05      7.57e-04\npolygon 89              177  1.75595e+06      2.25e-03\npolygon 90              192  3.40742e+05      4.36e-04\npolygon 91              217  3.29438e+05      4.21e-04\npolygon 92               87  1.70664e+05      2.18e-04\npolygon 93              173  3.68483e+05      4.71e-04\npolygon 94              289  7.60191e+06      9.72e-03\npolygon 95              242  2.21974e+05      2.84e-04\npolygon 96              130  2.80176e+05      3.58e-04\npolygon 97              140  2.14251e+05      2.74e-04\npolygon 98               83  1.73123e+05      2.21e-04\npolygon 99               92  5.33671e+05      6.82e-04\npolygon 100              95  1.45518e+05      1.86e-04\npolygon 101              55  6.35706e+05      8.13e-04\npolygon 102              54  5.03226e+05      6.44e-04\npolygon 103              48  5.56817e+04      7.12e-05\npolygon 104              60  1.16331e+05      1.49e-04\npolygon 105             137  2.05165e+06      2.62e-03\npolygon 106             122  2.43459e+06      3.11e-03\npolygon 107             113  1.71362e+06      2.19e-03\npolygon 108              55  3.10515e+05      3.97e-04\npolygon 109              95  1.38665e+06      1.77e-03\npolygon 110             127  1.95186e+06      2.50e-03\npolygon 111             266  4.52473e+05      5.79e-04\npolygon 112              79  6.97507e+05      8.92e-04\npolygon 113              71  5.63055e+03      7.20e-06\npolygon 114              10  1.99759e+02      2.55e-07\npolygon 115             435  2.77052e+07      3.54e-02\npolygon 116               3  1.96470e-01      2.51e-10\npolygon 117             117  1.71719e+05      2.20e-04\npolygon 118             271  1.09784e+06      1.40e-03\npolygon 119             135  1.05350e+06      1.35e-03\npolygon 120             305  2.79600e+06      3.58e-03\npolygon 121             554  3.04972e+06      3.90e-03\npolygon 122 (hole)        3 -7.06427e-01     -9.03e-10\npolygon 123             137  3.36218e+05      4.30e-04\npolygon 124              62  7.41438e+05      9.48e-04\npolygon 125             319  4.60551e+05      5.89e-04\npolygon 126             198  5.43484e+05      6.95e-04\npolygon 127              52  2.78303e+05      3.56e-04\npolygon 128             539  1.76950e+06      2.26e-03\npolygon 129             149  3.85093e+05      4.92e-04\npolygon 130             120  5.58761e+05      7.15e-04\npolygon 131              88  5.67581e+06      7.26e-03\npolygon 132             212  2.09608e+06      2.68e-03\npolygon 133              88  7.22591e+05      9.24e-04\npolygon 134             277  2.55046e+06      3.26e-03\npolygon 135              34  2.04263e+06      2.61e-03\npolygon 136              70  3.26041e+06      4.17e-03\npolygon 137             214  1.34615e+06      1.72e-03\npolygon 138              25  1.71337e+05      2.19e-04\npolygon 139              84  4.96255e+04      6.35e-05\npolygon 140             198  1.93991e+05      2.48e-04\npolygon 141              77  1.20171e+05      1.54e-04\npolygon 142             272  8.50853e+05      1.09e-03\npolygon 143              99  1.02647e+06      1.31e-03\npolygon 144             154  1.67538e+05      2.14e-04\npolygon 145              81  1.16002e+06      1.48e-03\npolygon 146              32  2.56100e+06      3.28e-03\npolygon 147             112  7.35502e+05      9.41e-04\npolygon 148             124  9.48159e+05      1.21e-03\npolygon 149             134  1.32109e+06      1.69e-03\npolygon 150              59  2.99730e+06      3.83e-03\npolygon 151             122  1.37683e+06      1.76e-03\npolygon 152             129  1.92662e+06      2.46e-03\npolygon 153             513  3.20330e+06      4.10e-03\npolygon 154 (hole)        3 -2.51044e-02     -3.21e-11\npolygon 155              92  2.34937e+06      3.00e-03\npolygon 156              85  9.63202e+05      1.23e-03\npolygon 157              35  4.85023e+05      6.20e-04\npolygon 158              82  1.88130e+06      2.41e-03\npolygon 159             103  1.42508e+06      1.82e-03\npolygon 160              60  2.38727e+06      3.05e-03\npolygon 161             114  1.07899e+06      1.38e-03\npolygon 162              71  4.59544e+05      5.88e-04\npolygon 163              90  2.47889e+05      3.17e-04\npolygon 164             106  2.13582e+05      2.73e-04\npolygon 165             205  2.47265e+06      3.16e-03\npolygon 166 (hole)        3 -4.87319e-02     -6.23e-11\npolygon 167 (hole)        3 -3.81487e-03     -4.88e-12\npolygon 168 (hole)       36 -7.79901e+03     -9.97e-06\npolygon 169               4  1.46442e-02      1.87e-11\npolygon 170             573  1.94069e+06      2.48e-03\npolygon 171 (hole)        4 -2.14740e-02     -2.75e-11\npolygon 172             348  2.11850e+06      2.71e-03\npolygon 173             109  4.85049e+05      6.20e-04\npolygon 174             102  7.57905e+05      9.69e-04\npolygon 175             119  3.51243e+05      4.49e-04\npolygon 176              69  1.31292e+06      1.68e-03\npolygon 177 (hole)        3 -3.72872e-02     -4.77e-11\npolygon 178              63  9.46648e+05      1.21e-03\npolygon 179             100  7.48039e+05      9.57e-04\npolygon 180             110  1.02229e+06      1.31e-03\npolygon 181              95  4.10995e+05      5.26e-04\npolygon 182              73  8.39489e+05      1.07e-03\npolygon 183             173  1.22849e+06      1.57e-03\npolygon 184              43  5.54625e+05      7.09e-04\npolygon 185             130  3.39290e+06      4.34e-03\npolygon 186              97  1.87809e+06      2.40e-03\npolygon 187              40  8.67749e+05      1.11e-03\npolygon 188              55  6.39144e+05      8.17e-04\npolygon 189              39  3.26015e+06      4.17e-03\npolygon 190              54  4.11402e+05      5.26e-04\npolygon 191              75  4.18656e+05      5.35e-04\npolygon 192             104  2.09818e+06      2.68e-03\npolygon 193              91  1.52455e+06      1.95e-03\npolygon 194              79  8.13382e+05      1.04e-03\npolygon 195              94  1.48429e+06      1.90e-03\npolygon 196             118  3.10803e+06      3.97e-03\npolygon 197              97  1.03728e+06      1.33e-03\npolygon 198             157  2.82017e+06      3.61e-03\npolygon 199              53  9.24760e+05      1.18e-03\npolygon 200             118  1.80655e+06      2.31e-03\npolygon 201              64  1.40454e+06      1.80e-03\npolygon 202              91  2.37934e+06      3.04e-03\npolygon 203             111  2.07780e+06      2.66e-03\npolygon 204             134  3.14295e+06      4.02e-03\npolygon 205             195  2.63648e+06      3.37e-03\npolygon 206              80  1.05717e+06      1.35e-03\npolygon 207              56  1.28795e+06      1.65e-03\npolygon 208              69  4.39648e+05      5.62e-04\npolygon 209              50  7.46884e+05      9.55e-04\npolygon 210              61  4.46241e+05      5.71e-04\npolygon 211              72  5.72500e+05      7.32e-04\npolygon 212             152  2.95937e+06      3.78e-03\npolygon 213             119  2.15829e+06      2.76e-03\npolygon 214             140  1.34746e+06      1.72e-03\npolygon 215              60  2.33891e+06      2.99e-03\npolygon 216             111  4.29714e+06      5.50e-03\npolygon 217             105  9.91041e+05      1.27e-03\npolygon 218             202  2.04955e+06      2.62e-03\npolygon 219             126  2.57909e+06      3.30e-03\npolygon 220              91  3.18758e+06      4.08e-03\npolygon 221              40  9.06316e+05      1.16e-03\npolygon 222              41  3.80204e+05      4.86e-04\npolygon 223              92  5.26383e+05      6.73e-04\npolygon 224              77  8.00299e+05      1.02e-03\npolygon 225             124  8.98563e+05      1.15e-03\npolygon 226             172  1.79346e+06      2.29e-03\npolygon 227             371  3.18810e+06      4.08e-03\npolygon 228              85  4.94502e+05      6.32e-04\npolygon 229              79  1.06189e+06      1.36e-03\npolygon 230              74  1.79446e+06      2.29e-03\npolygon 231              96  3.47521e+06      4.44e-03\npolygon 232              74  1.22567e+06      1.57e-03\npolygon 233             139  1.97438e+06      2.52e-03\npolygon 234             159  1.08508e+06      1.39e-03\npolygon 235              90  1.96414e+06      2.51e-03\npolygon 236              43  1.97494e+06      2.53e-03\npolygon 237             141  4.14132e+06      5.30e-03\npolygon 238             164  4.33983e+06      5.55e-03\npolygon 239             131  1.79606e+06      2.30e-03\npolygon 240             130  2.25115e+06      2.88e-03\npolygon 241             124  7.76141e+05      9.93e-04\npolygon 242             105  2.20631e+06      2.82e-03\npolygon 243             106  1.18013e+06      1.51e-03\npolygon 244              73  1.22990e+06      1.57e-03\npolygon 245             101  9.64681e+05      1.23e-03\npolygon 246              75  1.26341e+06      1.62e-03\npolygon 247              50  3.69771e+05      4.73e-04\npolygon 248              83  3.20366e+06      4.10e-03\npolygon 249              96  1.10727e+06      1.42e-03\npolygon 250              81  1.28739e+06      1.65e-03\npolygon 251              32  8.42672e+05      1.08e-03\npolygon 252              61  1.33353e+06      1.71e-03\npolygon 253              50  1.00740e+06      1.29e-03\npolygon 254             147  8.94517e+05      1.14e-03\npolygon 255              76  9.11208e+05      1.17e-03\npolygon 256              43  1.14382e+06      1.46e-03\npolygon 257              95  1.32887e+06      1.70e-03\npolygon 258             111  6.09896e+05      7.80e-04\npolygon 259              66  7.63181e+05      9.76e-04\npolygon 260             164  2.76835e+06      3.54e-03\npolygon 261             134  3.46704e+06      4.43e-03\npolygon 262             401  7.83399e+06      1.00e-02\npolygon 263              80  2.77864e+06      3.55e-03\npolygon 264              54  8.62737e+05      1.10e-03\npolygon 265             105  1.58344e+06      2.03e-03\npolygon 266              43  8.46135e+05      1.08e-03\npolygon 267             122  1.74439e+06      2.23e-03\npolygon 268              89  1.00159e+06      1.28e-03\npolygon 269              82  1.09730e+06      1.40e-03\npolygon 270             251  4.84852e+06      6.20e-03\npolygon 271              53  6.68456e+05      8.55e-04\npolygon 272              69  6.24879e+05      7.99e-04\npolygon 273              85  6.74995e+05      8.63e-04\npolygon 274             123  2.33068e+06      2.98e-03\npolygon 275              68  1.09322e+06      1.40e-03\npolygon 276              83  1.86187e+06      2.38e-03\npolygon 277              45  9.09420e+05      1.16e-03\npolygon 278             107  2.11479e+06      2.70e-03\npolygon 279             204  3.33419e+06      4.26e-03\npolygon 280              59  1.51553e+06      1.94e-03\npolygon 281              60  9.44998e+05      1.21e-03\npolygon 282             189  1.99078e+06      2.55e-03\npolygon 283              91  1.49663e+04      1.91e-05\npolygon 284              71  8.18741e+03      1.05e-05\npolygon 285              83  1.64142e+06      2.10e-03\npolygon 286             173  1.65258e+05      2.11e-04\npolygon 287              83  2.25924e+06      2.89e-03\npolygon 288             221  3.86033e+06      4.94e-03\npolygon 289              58  8.59179e+05      1.10e-03\npolygon 290              63  5.46403e+05      6.99e-04\npolygon 291              71  1.94861e+06      2.49e-03\npolygon 292              87  1.07862e+06      1.38e-03\npolygon 293              99  6.87931e+05      8.80e-04\npolygon 294             151  3.02315e+06      3.87e-03\npolygon 295              35  4.41738e+05      5.65e-04\npolygon 296              62  9.70064e+05      1.24e-03\npolygon 297              93  1.23590e+06      1.58e-03\npolygon 298             100  1.63967e+06      2.10e-03\npolygon 299             106  2.54311e+06      3.25e-03\npolygon 300              83  9.55710e+05      1.22e-03\npolygon 301              58  3.16883e+05      4.05e-04\npolygon 302              94  1.04642e+06      1.34e-03\npolygon 303              63  9.21433e+05      1.18e-03\npolygon 304             149  7.37056e+06      9.43e-03\npolygon 305              52  6.84703e+05      8.76e-04\npolygon 306             126  1.51148e+06      1.93e-03\npolygon 307             151  2.45910e+06      3.14e-03\npolygon 308             191  7.03480e+06      9.00e-03\npolygon 309             158  3.65203e+06      4.67e-03\npolygon 310             285  1.71971e+06      2.20e-03\npolygon 311 (hole)        3 -2.86414e-01     -3.66e-10\npolygon 312              84  1.08864e+06      1.39e-03\npolygon 313              81  1.56904e+06      2.01e-03\npolygon 314             174  1.67003e+06      2.14e-03\npolygon 315              79  2.39108e+06      3.06e-03\npolygon 316              52  1.37871e+06      1.76e-03\npolygon 317             100  9.23214e+05      1.18e-03\npolygon 318             246  5.32542e+06      6.81e-03\npolygon 319              92  1.41829e+06      1.81e-03\npolygon 320              50  1.48925e+06      1.90e-03\npolygon 321             117  5.18612e+06      6.63e-03\npolygon 322             532  3.50960e+07      4.49e-02\npolygon 323              80  1.46328e+06      1.87e-03\npolygon 324             258  9.95947e+05      1.27e-03\npolygon 325              55  1.45551e+06      1.86e-03\npolygon 326              44  1.49911e+06      1.92e-03\npolygon 327              68  9.24865e+05      1.18e-03\npolygon 328             127  1.34017e+06      1.71e-03\npolygon 329             348  8.50444e+06      1.09e-02\npolygon 330 (hole)      316 -5.11288e+04     -6.54e-05\npolygon 331             208  1.36000e+06      1.74e-03\npolygon 332              67  1.43137e+05      1.83e-04\npolygon 333              64  4.36369e+05      5.58e-04\npolygon 334               3  6.54649e-01      8.37e-10\npolygon 335             130  1.25974e+06      1.61e-03\npolygon 336             112  3.29141e+06      4.21e-03\npolygon 337             102  1.57600e+06      2.02e-03\npolygon 338             122  1.66547e+06      2.13e-03\npolygon 339              94  1.76709e+06      2.26e-03\npolygon 340            1831  6.97053e+07      8.91e-02\npolygon 341              30  2.80002e+04      3.58e-05\npolygon 342              27  1.50311e+04      1.92e-05\npolygon 343              95  2.05005e+06      2.62e-03\npolygon 344             129  1.51776e+06      1.94e-03\npolygon 345             117  5.95652e+05      7.62e-04\npolygon 346             263  3.28413e+06      4.20e-03\npolygon 347             118  2.55346e+06      3.27e-03\npolygon 348              49  9.62437e+05      1.23e-03\npolygon 349             112  1.28130e+06      1.64e-03\npolygon 350              26  7.58119e+05      9.70e-04\npolygon 351              76  9.05921e+05      1.16e-03\npolygon 352             285  1.61128e+06      2.06e-03\npolygon 353              65  1.26165e+06      1.61e-03\npolygon 354            1596  1.74949e+07      2.24e-02\npolygon 355 (hole)        3 -1.23053e-04     -1.57e-13\npolygon 356             164  3.45046e+06      4.41e-03\npolygon 357              65  1.74196e+06      2.23e-03\npolygon 358              74  1.39487e+06      1.78e-03\npolygon 359             141  1.07438e+06      1.37e-03\npolygon 360             668  5.40368e+07      6.91e-02\npolygon 361              77  3.29940e+05      4.22e-04\npolygon 362             708  1.28815e+07      1.65e-02\npolygon 363              44  2.26583e+03      2.90e-06\npolygon 364             181  7.23582e+06      9.25e-03\npolygon 365             192  2.14709e+06      2.75e-03\npolygon 366              90  1.51100e+06      1.93e-03\npolygon 367             125  9.36415e+05      1.20e-03\npolygon 368             148  1.64863e+06      2.11e-03\npolygon 369             102  1.09939e+06      1.41e-03\npolygon 370              77  2.20921e+06      2.83e-03\npolygon 371              79  1.26438e+06      1.62e-03\npolygon 372              75  2.20669e+06      2.82e-03\npolygon 373              40  1.26592e+06      1.62e-03\npolygon 374             720  3.71479e+07      4.75e-02\npolygon 375             111  3.91607e+06      5.01e-03\npolygon 376             148  2.17538e+06      2.78e-03\npolygon 377             131  3.62184e+06      4.63e-03\npolygon 378              80  1.43291e+06      1.83e-03\npolygon 379             112  4.38713e+06      5.61e-03\npolygon 380             145  1.20081e+06      1.54e-03\npolygon 381             531  2.45079e+06      3.13e-03\npolygon 382 (hole)        3 -1.78426e-03     -2.28e-12\npolygon 383 (hole)        3 -2.25260e+00     -2.88e-09\npolygon 384             125  1.54074e+06      1.97e-03\npolygon 385             378  1.63581e+06      2.09e-03\npolygon 386             357  2.24138e+06      2.87e-03\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\n\n\nCreating PPP object (Hawker Centres)\nNow, we would convert the data on different hawker centres in Singapore to PPP format\n\nhawker_centres_ppp &lt;- as(hawker_centre_pts_sp, \"ppp\")\nplot(hawker_centres_ppp)\n\n\n\n\n\nsummary(hawker_centres_ppp)\n\nPlanar point pattern:  5818 points\nAverage intensity 8.539384e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [12287.77, 45225.29] x [27687.23, 48372.26] units\n                    (32940 x 20690 units)\nWindow area = 681314000 square units\n\n\nTo ensure that all our points are accurately in the desired range of our study area, we would be binding the hawker centres ppp object to the Singapore owin object\n\nhawkers_SG_ppp = hawker_centres_ppp[singapore_owin]\nplot(hawkers_SG_ppp)\n\n\n\n\nNext we would be converting the unit of scale to kilometers\n\nhawkers_SG_ppp &lt;- rescale(hawkers_SG_ppp, 1000, \"km\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#first-order-spatial-point-analysis-kernel-density",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#first-order-spatial-point-analysis-kernel-density",
    "title": "Take_home_Ex03 test",
    "section": "First-Order Spatial-Point Analysis: Kernel Density",
    "text": "First-Order Spatial-Point Analysis: Kernel Density\n\nFinding Kernel Density\nFinding the kernel density of hawker centres all across Singapore\n\nkde_hawkers_bw &lt;- density(hawkers_SG_ppp, sigma=0.8, edge=TRUE, kernel=\"gaussian\")\nplot(kde_hawkers_bw)\n\n\n\n\nDifferent bandwith tests\n\nbw.CvL(hawkers_SG_ppp)\n\n   sigma \n6.177942 \n\n\n\nbw.scott(hawkers_SG_ppp)\n\n sigma.x  sigma.y \n1.496867 1.021742 \n\n\n\nbw.ppl(hawkers_SG_ppp)\n\n     sigma \n0.09078989 \n\n\n\nbw.diggle(hawkers_SG_ppp)\n\n      sigma \n0.006399932 \n\n\nFilter by food option and planning area\n\nfiltered_df &lt;- hawkers_all_regions[\n  grepl(\"roast\", hawkers_all_regions$`Hawker Centre Stalls`, ignore.case = TRUE) &\n  hawkers_all_regions$REGION_N == \"CENTRAL REGION\", \n]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#diving-deeper-eda-playing-around",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#diving-deeper-eda-playing-around",
    "title": "Take_home_Ex03 test",
    "section": "Diving Deeper (EDA + Playing Around):",
    "text": "Diving Deeper (EDA + Playing Around):\nWe could even filter out different areas within Singapore. the example below includes filtering by region i.e. the central region in Singapore\n\nCreating an OWIN Object (Central Region)\nRepeating the same process\n\nsg_central_region &lt;- singapore_mpsz %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\n\ncentral_sp &lt;- as_Spatial(sg_central_region)\ncentral_sp = as(central_sp, \"SpatialPolygons\")\n\n\ncentral_owin = as(central_sp, \"owin\")\nplot(central_owin)\n\n\n\n\n\n\nCreating an OWIN Object (Bukit Merah)\nIn addition to just the different regions of Singapore, we could also zoom in and dive into individual planning areas of Singapore to gauge second order spatial point pattens within Bukit Merah.\nRepeating the same process\n\nbukit_merah &lt;- singapore_mpsz %&gt;%\n  filter(PLN_AREA_N == \"BUKIT MERAH\")\n\n\nBM_sp &lt;- as_Spatial(bukit_merah)\nBM_sp = as(BM_sp, \"SpatialPolygons\")\n\n\nBM_owin = as(BM_sp, \"owin\")\nplot(BM_owin)\n\n\n\n\n\n\nCreating an PPP Object (Filtering by Food)\nWithin our dataset, we could also filter out some of the finest culinary delicacies eg. Ban Mian, Lor Mee, Chicken Rice etc.\nFiltering out all roasted meat places in Singapore\n\nroasted_meat &lt;- complete_filtered_hawker_stalls_data_sf[\n  grepl(\"roast\", complete_filtered_hawker_stalls_data_sf$`Hawker Centre Stalls`, ignore.case = TRUE), \n]\n\nConverting the points of all roasted meat hawker stalls in Singapore to the SP format in the form of spatial points. When plotted on a map, we would be able to see the different hawker centres in Singapore with stalls that serve the cantonese style roasted meats\n\nroasted_meat_sp &lt;- as_Spatial(roasted_meat)\nroasted_meat_sp = as(roasted_meat_sp, \"SpatialPoints\")\n\nConverting the SP object to a PPP object (roasted_meat_ppp)\n\nroasted_meat_ppp &lt;- as(roasted_meat_sp, \"ppp\")\nplot(roasted_meat_ppp)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#second-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#second-order-spatial-point-pattern-analysis",
    "title": "Take_home_Ex03 test",
    "section": "Second-Order Spatial Point Pattern Analysis",
    "text": "Second-Order Spatial Point Pattern Analysis\nNow, we would be doing a second order spatial point analysis on all hawker centres in the central area that serve roasted meat i.e. we would be filtering all hawker centres in the central area that have stalls serving roasted meats.\nBinding the roasted meats ppp object to the central area owin object\n\nroasted_meat_central_ppp = roasted_meat_ppp[central_owin]\nplot(roasted_meat_central_ppp)\n\n\n\n\nSimilarly, we could also restrict our study area to just the planning area of Bukit Merah\n\nroasted_meat_BM_ppp = roasted_meat_ppp[BM_owin]\nplot(roasted_meat_BM_ppp)\n\n\n\n\nHowever, for the course of our study we would be using the central area.\n\nG-test\n\nG_C = Gest(roasted_meat_central_ppp, correction = \"border\")\nplot(G_C, xlim=c(0,1000))\n\n\n\n\n\nG_C.csr &lt;- envelope(roasted_meat_central_ppp, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_C.csr)\n\n\n\n\n\n\nF-test\n\nF_C = Fest(roasted_meat_central_ppp)\nplot(F_C)\n\n\n\n\n\nF_C.csr &lt;- envelope(roasted_meat_central_ppp, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_C.csr)\n\n\n\n\n\n\nK-test\n\nK_C = Kest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(K_C, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nK_C.csr &lt;- envelope(roasted_meat_central_ppp, Kest, nsim = 20, rank = 1, glocal=TRUE)\n\nGenerating 20 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n20.\n\nDone.\n\n\n\nplot(K_C.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nL-test\n\nL_C = Lest(roasted_meat_central_ppp, correction = \"Ripley\")\nplot(L_C, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_C.csr &lt;- envelope(roasted_meat_central_ppp, Lest, nsim = 20, rank = 1, glocal=TRUE)\n\nGenerating 20 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n20.\n\nDone.\n\n\n\nplot(L_C.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#potential-inputs-for-shiny-app-to-analyse-second-order-spatial-point-patterns",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#potential-inputs-for-shiny-app-to-analyse-second-order-spatial-point-patterns",
    "title": "Take_home_Ex03 test",
    "section": "Potential Inputs for shiny app (To analyse second-order spatial point patterns):",
    "text": "Potential Inputs for shiny app (To analyse second-order spatial point patterns):\n\nFilter by region: Central, East, West, North, Northeast\nFilter by planning area: Downtown Core, Rochor, Bukit Merah, Geylang\nFilter by dish: Lor Mee, Roasted Meat, Ban Mian, Chicken Rice\nFilter by Dietary Restrictions"
  }
]